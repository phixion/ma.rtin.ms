{"id":"CSXkJZ3MdFx","title":"Dev News","displayTitle":"Dev News","url":"","feedLink":"","isQuery":true,"isEmpty":false,"isHidden":false,"itemCount":58,"items":[{"title":"Station Amsterdam Bijlmer ArenA","url":"https://www.reddit.com/r/linux/comments/1j9pgmq/station_amsterdam_bijlmer_arena/","date":1741800252,"author":"/u/nicq88","guid":346,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Carefully But Purposefully Oxidising Ubuntu","url":"https://discourse.ubuntu.com/t/carefully-but-purposefully-oxidising-ubuntu/56995","date":1741797078,"author":"/u/urzop","guid":359,"unread":true,"content":"<!DOCTYPE html>","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/rust/comments/1j9o5nq/carefully_but_purposefully_oxidising_ubuntu/"},{"title":"HTTP/3 is everywhere but nowhere","url":"https://httptoolkit.com/blog/http3-quic-open-source-support-nowhere/","date":1741796821,"author":"/u/pimterry","guid":350,"unread":true,"content":"<p data-text=\"true\" font-size=\"m\" color=\"darkGrey\">We've developed a totally new version of HTTP, and we're on track to migrate more than 1/3 of web traffic to it already! This is astonishing progress.</p><p data-text=\"true\" font-size=\"m\" color=\"darkGrey\">At the same time, neither QUIC nor HTTP/3 are included in the standard libraries of any major languages including Node.js, Go, Rust, Python or Ruby. Curl recently <a href=\"https://curl.se/docs/http3.html\" target=\"_blank\" rel=\"noopener noreferrer\">gained support</a> but it's experimental and disabled in most distributions. There are a rare few external libraries for some languages, but all are experimental and/or independent of other core networking APIs. Despite mobile networking being a key use case for HTTP/3, Android's most popular HTTP library <a href=\"https://github.com/square/okhttp/blob/59cbf64f6ba98e2c8f95bf9db41dc47ad2232f94/okhttp/src/commonJvmAndroid/kotlin/okhttp3/Protocol.kt#L86-L94\" target=\"_blank\" rel=\"noopener noreferrer\">has no support</a>. Popular servers like Nginx have only <a href=\"https://nginx.org/en/docs/quic.html\" target=\"_blank\" rel=\"noopener noreferrer\">experimental support</a>, disabled by default, Apache has no support or published plan for support, and Ingress-Nginx (arguably the most popular Kubernetes reverse proxy) has <a href=\"https://github.com/kubernetes/ingress-nginx/issues/4760\" target=\"_blank\" rel=\"noopener noreferrer\">dropped all plans for HTTP/3 support</a> punting everything to a totally new (as yet unreleased) successor project instead.</p><p data-text=\"true\" font-size=\"m\" color=\"darkGrey\">Really it's hard to point to any popular open-source tools that fully support HTTP/3: rollout has barely even started.</p><p data-text=\"true\" font-size=\"m\" color=\"darkGrey\">This seems contradictory. What's going on?</p><h2 data-heading=\"true\" font-size=\"m\" color=\"lightGrey\">Why do we need more than HTTP/1.1?</h2><p data-text=\"true\" font-size=\"m\" color=\"darkGrey\">Let's step back briefly. Why does this matter? Who cares about whether HTTP/3 is being rolled out successfully or not? If browser traffic and the big CDNs support HTTP/3, do we even need it in other client or server implementations?</p><p data-text=\"true\" font-size=\"m\" color=\"darkGrey\">You could make much the same argument for HTTP/3: this is useful for the high-latency many-requests traffic of web browsers &amp; CDNs, but irrelevant elsewhere.</p><p data-text=\"true\" font-size=\"m\" color=\"darkGrey\">Even just considering HTTP/1.1 vs HTTP/2 though, the reality of multiplexing benefits is more complicated:</p><ul><li>Latency of responses isn't just network RTT: a slow server response because of server processing will block your TCP connection just as hard as network latency.</li><li>Your load balancer is often  co-located with your backend, e.g. if you serve everything through a geographically distributed CDN, which serves most content from its cache, but falls back to a separate application server backend for dynamic content &amp; cache misses.</li><li>Long-lived TCP connections die. Networking can fail in a million ways, even within data centers, and 'keep-alive' is a desperate plea at best. Even HTTP itself will force this: there's cases like a response body failing half-way through that are unrecoverable in HTTP/1.1 without killing the connection entirely.</li><li>Any spikes in traffic mean you'll end up with the wrong number of TCP connections one way or the other: either you need an enormous unused pool available at all times, or you'll need to open a flood of new connections as traffic spikes come in, and so deal with TCP slow start, RTT &amp; extra TLS handshakes as you do so.</li><li>There's a lot of traffic that's not websites  not just within in datacenters. Mobile apps definitely do have network latency issues, API servers absolutely do have slow endpoints that can block up open connections, and IoT is a world built almost exclusively of unreliable networks and performance challenges. All of these cases get value from HTTP/2 &amp; HTTP/3.</li></ul><p data-text=\"true\" font-size=\"m\" color=\"darkGrey\">Moving beyond multiplexing, there's plenty of other HTTP/2 benefits that apply beyond just load balancers &amp; browsers:</p><ul><li>HTTP header compression (<a href=\"https://blog.cloudflare.com/hpack-the-silent-killer-feature-of-http-2/\" target=\"_blank\" rel=\"noopener noreferrer\">HPACK</a> and <a href=\"https://datatracker.ietf.org/doc/rfc9204/\" target=\"_blank\" rel=\"noopener noreferrer\">QPACK</a> in HTTP/2 &amp; HTTP/3 respectively) makes for a significant reduction in traffic in many cases,  on long-lived connections such as within internal infrastructure. This is useful on the web, but can be an even bigger boost on mobile &amp; IoT scenarios where networks are limited and unrealiable.</li><li>Bidirectional HTTP request &amp; response streaming (only possible in HTTP/2 &amp; HTTP/3) enables entirely different communication patterns. Most notably used in gRPC (which  HTTP/2 for most usage) this means the client and server can exchange continuous data within the same 'request' at the same time, acting similarly to a websocket but within existing HTTP semantics.</li><li>Both protocols support advanced prioritization support, allowing clients to indicate priority of requests to servers, to more efficiently allocate processing &amp; receive the data they need most urgently. This is valuable for clients, but also between the load balancer and server: a cache miss for a waiting client has a very different priority to an optional background cache revalidation.</li></ul><p data-text=\"true\" font-size=\"m\" color=\"darkGrey\">All that is just for HTTP/2. HTTP/3 improves on this yet further, with:</p><ul><li>Significantly increased resilience to unreliable networks. By moving away from TCP's strict packet ordering, HTTP/3 makes each stream within the connection fully independent, so a missed packet on one stream doesn't slow down another stream.</li><li>Zero round-trip connection initialization. TLS1.3 allows zero round-trip connection setup when resuming a connection to a known server, so you don't need to wait for the TLS handshake before sending application data. For HTTP/1 &amp; HTTP/2 though, you still need a TCP handshake first. With QUIC, you can do <a href=\"https://blog.cloudflare.com/even-faster-connection-establishment-with-quic-0-rtt-resumption/\" target=\"_blank\" rel=\"noopener noreferrer\">0RTT TLS handshakes</a>, meaning you can connect to a server and send an HTTP request immediately, without waiting for a single packet in response, so there's no unnecessary RTT delay whatsoever.</li><li>Reductions in traffic size, connection count, and network round trips that can result in reduced battery use for clients and reduced processing, latency &amp; bandwidth for servers.</li><li>Support for <a href=\"https://pulse.internetsociety.org/blog/how-quic-helps-you-seamlessly-connect-to-different-networks\" target=\"_blank\" rel=\"noopener noreferrer\">connection migration</a> allowing a client to continue the same connection even as its IP address changes, and in theory even supporting multi-path connections using multiple addresses (e.g. a single connection to a server using both WiFi &amp; cellular at the same time for extra bandwidth/reliability) in future.</li><li>Improved network congestion handling by moving away from TCP: QUIC can use <a href=\"https://research.google/pubs/bbr-congestion-based-congestion-control-2/\" target=\"_blank\" rel=\"noopener noreferrer\">Bottleneck Bandwidth and RTT</a> (BBR) for improved congestion control via active detection of network conditions, includes timestamps in each packet to help measure RTT, has improved detection of and recovery from packet loss, has better support for explicit congestion notifications (ECN) to actively manage congestion before packet loss, and may gain forward-error correction (FEC) support <a href=\"https://datatracker.ietf.org/doc/draft-michel-quic-fec/\" target=\"_blank\" rel=\"noopener noreferrer\">in future</a> too.</li><li>Support for <a href=\"https://github.com/w3c/webtransport/blob/main/explainer.md\" target=\"_blank\" rel=\"noopener noreferrer\">WebTransport</a>, a new protocol providing bidirectional full-duplex connections (similar to WebSockets) but supporting multiplexed streams to avoid head-of-line blocking, fixing various legacy WebSocket limitations (like incompatibility with CORS), and allowing streams to be unreliable and unordered - effectively providing UDP-style guarantees and lower-latency within web-compatible stream connections.</li></ul><p data-text=\"true\" font-size=\"m\" color=\"darkGrey\">In addition to the theory, there's some concrete measureable benefits being reported already. RequestMetric ran some <a href=\"https://requestmetrics.com/web-performance/http3-is-fast/\" target=\"_blank\" rel=\"noopener noreferrer\">detailed benchmarks</a> showing some astonishing performance improvements for example:</p><p data-text=\"true\" font-size=\"m\" color=\"darkGrey\">And Fastly shared the major improvements in time-to-first-byte they're seeing in the real world:</p><p data-text=\"true\" font-size=\"m\" color=\"darkGrey\">This all very clearly Good Stuff.</p><p data-text=\"true\" font-size=\"m\" color=\"darkGrey\">Now that the technology is standardized, widely supported in browsers &amp; CDNs and thoroughly battle-tested, I think it's clear that  developers should be able to get these benefits built into their languages, servers &amp; frameworks.</p><p data-text=\"true\" font-size=\"m\" color=\"darkGrey\">That's not what's happened though: despite its benefits and frequent use in network traffic, most developers can't easily start using HTTP/3 end-to-end today. In this, HTTP/3 has thrown a long-growing divide on the internet into sharp relief. Nowadays, there's two very different kinds of web traffic:</p><ul><li>Major browsers plus some very-specific mobile app traffic, where a small set of finely tuned &amp; automatic-updating clients talk to a small set of very big servers, with as much traffic as possible handled by either an enormous CDN (Cloudflare, Akamai, Fastly, CloudFront) and/or significant in-house infra (Google, Meta, Amazon, Microsoft).</li><li>Everybody else: backend API clients &amp; servers, every other mobile app, every smaller CDN, websites without a CDN, desktop apps, IoT, bots &amp; indexers &amp; scrapers, niche web browsers, self-hosted homelabs, CLI tools &amp; scripts, students learning about network protocols, you name it.</li></ul><p data-text=\"true\" font-size=\"m\" color=\"darkGrey\">Let's simplify a bit, and describe these two cases as 'hyperscale web' and 'long-tail web'. Both groups are building on the same basic standards, but they have very different focuses and needs, and increasingly different tools &amp; platforms. This has been true for quite a while, but the reality of HTTP/3 makes it painfully clear.</p><p data-text=\"true\" font-size=\"m\" color=\"darkGrey\">There's a few notable differences in these groups:</p><ul><li>The long-tail world is fragmented into different implementations, almost by definition. Most of the biggest implementations are open-source organizations with relatively little direct funding or full-time engineering power available, and much work is done by volunteers with no mandated central direction or clear focus.</li><li>The hyperscale world is controlled by a relatively small number of key stakeholders on both client &amp; server side (you can count the relevant companies without taking your socks off). This lets them agree standards to fit their needs quickly &amp; effectively - literally putting a representative of every implementation in the same room.</li><li>The hyperscale ecosystem has far more concentrated cash &amp; motivations. It's a small number of players comprising some of the most valuable companies in the world, with business models that tie milliseconds of web performance directly to their bottom line.</li><li>The long-tail is completely dependent on open-source implementations and shared code. If you want to build a new mobile app tomorrow, you obviously should not start by building an HTTP parser.</li><li>The hyperscale ecosystem isn't worried about access to open-source implementations at all. They have sufficient engineering resources and complicated use cases that building their own custom implementation of a protocol from scratch can make perfect sense. Google.com is not going to be served by an Apache module with default settings, and Instagram is not sending requests with the same HTTP library as a Hello-World app.</li><li>The combination of hyperscale's evergreen clients plus money &amp; motivation plus tight links between implementers and the business using the tools, means they can move fast to quickly build, ship &amp; iterate new approaches.</li><li>Long-tail implementations are only updated relatively rarely (how many outdated Apache servers are there on the web?) and the maintainers are a tiny subset of the users, who care significantly about stability and avoiding breaking changes. Long-tail tool maintainers  just move fast and break things.</li></ul><p data-text=\"true\" font-size=\"m\" color=\"darkGrey\">You can see the picture I'm painting. These two groups exist on the same web, but in very different ways.</p><p data-text=\"true\" font-size=\"m\" color=\"darkGrey\">Some of this might sound like the hyperscale gang are the nefarious baddies. That is not what I mean (fine, yes, there's an interesting conversation there more broadly, but talking strictly about network protocols here). Regarding HTTP/3 specifically, this is some  engineering work that is solving real problems on the web, through some astonishingly tidy cooperation on open standards across different massive organizations. That's great!</p><p data-text=\"true\" font-size=\"m\" color=\"darkGrey\">There are many  people using services built by these companies, and their obsession with web performance is improving the quality of those services for large numbers of real people every day. This is very cool.</p><p data-text=\"true\" font-size=\"m\" color=\"darkGrey\">However, this would be much cooler if it was accessible to every other server, client &amp; developer too. Most notably, this means the next generation of web technology is being defined &amp; built by one minority group, and the larger majority have effectively no way to access this technology right now (despite years of standardization and development) other than paying money to the CDNs of that first minority group to help. Not cool.</p><p data-text=\"true\" font-size=\"m\" color=\"darkGrey\">I think the hyperscaler/long-tail divide is the fundamental cause here, but that's created quite a few more concrete issues downstream, the most notable of which is OpenSSL's approach to QUIC.</p><ul><li>BoringSSL shipped a usable API for QUIC implementations back in 2018.</li><li>OpenSSL did not, so various forks like QuicTLS appeared, providing OpenSSL plus BoringSSL's QUIC API.</li><li>An ecosystem of QUIC &amp; HTTP/3 implementations (most notably Quiche, msh3/msquic, and nghttp3/ngtcp2) were built on top of BoringSSL and these forks over the many subsequent years.</li><li>OpenSSL has since slowly implemented an incompatible approach that this ecosystem can't directly use, with client support released in OpenSSL 3.2 (2023), and server support landing imminently in OpenSSL 3.5 (2025).</li></ul><p data-text=\"true\" font-size=\"m\" color=\"darkGrey\">Some would argue this is a major mistake by OpenSSL, while I think OpenSSL would argue that BoringSSL's design is flawed and/or unsuitable for OpenSSL, and it was worth taking the time to do it right.</p><p data-text=\"true\" font-size=\"m\" color=\"darkGrey\">Regardless of who's actually 'right', this has created a significant schism in the entire ecosystem. Curl has a good overview of the state of play  OpenSSL:</p><p data-text=\"true\" font-size=\"m\" color=\"darkGrey\">OpenSSL's approach doesn't work easily in the TLS section for any of the existing QUIC &amp; HTTP/3 implementations. In effect, they've started another column, but with no compatible implementations currently available in the HTTP/3 &amp; QUIC spots.</p><p data-text=\"true\" font-size=\"m\" color=\"darkGrey\">This is a notable issue because for most major projects it would be an enormous &amp; problematic undertaking to drop support for OpenSSL, which effectively means they still cannot ship built-in QUIC support today. Node.js recently <a href=\"https://github.com/nodejs/node/issues/57379\" target=\"_blank\" rel=\"noopener noreferrer\">briefly discussed</a> even dropping OpenSSL entirely because of this, in favour of BoringSSL or similar, but it's clear that it's not practical: it would be an enormous breaking change, no alternative offers the same levels of long-term support guarantees, and Node and other languages are often shipped in enviroments like Linux distributions where it uses the system's shared OpenSSL implementation, so this would create big headaches downstream too.</p><p data-text=\"true\" font-size=\"m\" color=\"darkGrey\">This is one example of the difference in fundamental pressures of the two tiers of organizations on the web here: open-source tools can't break things like this, and the libraries available to the long-tail are fragmented and uncoordinated. Meanwhile hyperscalers can make decisions quickly and near-unilaterally to set up implementations that work for their environments today, allowing them to get the benefits of new technologies without worrying too much about the state of the open-source common ecosystem for everybody else.</p><p data-text=\"true\" font-size=\"m\" color=\"darkGrey\">I hope this is makes it clear there's a big problem here: underlying organizational differences are turning into a fundamental split in technologies on the Internet. There's an argument that despite the benefits, the long-tail web doesn't  HTTP/3, so they can just ignore it, or use a CDN with built-in support if they really care, and there is no real obligation as such for the hyperscalers to provide convenient implementations to the rest of us just because they want to use some neat new tech between themselves.</p><p data-text=\"true\" font-size=\"m\" color=\"darkGrey\">The problem here though is that there are real concrete benefits to these technologies. QUIC is a significant improvement on alternatives, especially on slow or unreliable mobile internet (e.g. everywhere outside the well-connected offices of the developed world) and when roaming between connections. There are technologies built on top of it, like WebTransport which provides additional significant new features &amp; performance to replace WebSockets. There will be more features that depend on HTTP/3 in future (see how gRPC built on HTTP/2 for example). Again: the technology here is great! But it's a challenge if those benefits are not evenly distributed, and only accessible to a small set of organizations and their customers.</p><p data-text=\"true\" font-size=\"m\" color=\"darkGrey\">Continuing down this road has some plausible serious consequences:</p><ul><li>In the short term, the long-tail web gains a concerete disadvantage vs the hyperscale web, as HTTP/3 and QUIC makes hyperscale sites faster &amp; more reliable (especially on slow &amp; mobile internet).</li><li>Other web tools and components (React et al) used by developers either working for hyperscale organizations or building on top of their tools &amp; infra will increase in complexity to match, taking HTTP/3's benefits for granted and moving forwards on that basis, making them less and less relevant to other use cases.</li><li>If we're not careful, the split between the long-tail &amp; hyperscale cases will widen. New features &amp; tools for each use case will emerge, and won't be implemented by the other, and tooling will increasingly stratify.</li><li>If hyperscale-only tech is widespread but implementations are not, it becomes increasingly difficult to build tools to integrate with these. Building a Postman-like client for WebTransport is a whole lot harder if you're implementing the protocol from scratch instead of just a UI.</li><li>You'll start to see lack of HTTP/3 support used as a signal to trigger captchas &amp; CDN blocks, like as TLS fingerprinting is already today. HTTP/3 support could very quickly &amp; easily become a way to detect many non-browser clients, cutting long-tail clients off from the modern web entirely.</li><li>As all this escalates and self-reinforces, it becomes less &amp; less sensible for the hyperscale side to worry about the long-tail's needs at all, and the ecosystem could stratify completely</li></ul><p data-text=\"true\" font-size=\"m\" color=\"darkGrey\">All of that is a way away, and quite hypothetical! I suspect  of this will happen to some degree, but there's a wide spectrum of possibility. It's notable though that this doesn't just apply to HTTP/3: the centralization and coordination of a few CDN &amp; web clients like this could easily play out similarly in many other kinds of technological improvements too.</p><p data-text=\"true\" font-size=\"m\" color=\"darkGrey\">For HTTP/3 at least, I'm hopeful that there will be a happy resolution here to improve on this split in time, although I don't know if it will come soon enough to avoid notable consequences. Many of the external libraries and experimental implementations of QUIC &amp; HTTP/3 will mature with time, and I think eventually (I really really hope) the OpenSSL QUIC API schism will get resolved to open the door to QUIC support in the  OpenSSL-based environments, either with adapters to support both approaches or via a new HTTP/3 &amp; QUIC stack that supports OpenSSL model directly. If you're interested in working on either, and there's anything I can do to help directly or to help fund that work, please <a href=\"https://httptoolkit.com/contact/\" target=\"_blank\" rel=\"noopener noreferrer\">get in touch</a>.</p><p data-text=\"true\" font-size=\"m\" color=\"darkGrey\">None of that will happen today though, so unfortunately if you want to use HTTP/3 end-to-end in your application, you may in for a hard time for a while yet. Watch this space.</p><p data-text=\"true\" font-size=\"m\" color=\"darkGrey\"><em>Want to debug HTTP/1 and HTTP/2 in the meantime? Test out  now. Open-source one-click HTTP(S) interception &amp; debugging for web, Android, terminals, Docker &amp; more.</em></p>","contentLength":18303,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1j9o1tx/http3_is_everywhere_but_nowhere/"},{"title":"IBM CEO Doesn't Think AI Will Replace Programmers Anytime Soon","url":"https://developers.slashdot.org/story/25/03/12/1448242/ibm-ceo-doesnt-think-ai-will-replace-programmers-anytime-soon?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1741795200,"author":"msmash","guid":263,"unread":true,"content":"IBM CEO Arvind Krishna has publicly disagreed with Anthropic CEO Dario Amodei's prediction that AI will write 90% of code within 3-6 months, estimating instead that only \"20-30% of code could get written by AI.\" \n\n\"Are there some really simple use cases? Yes, but there's an equally complicated number of ones where it's going to be zero,\" Krishna said during an onstage interview at SXSW. He argued AI will boost programmer productivity rather than eliminate jobs. \"If you can do 30% more code with the same number of people, are you going to get more code written or less?\" he asked. \"History has shown that the most productive company gains market share, and then you can produce more products.\"","contentLength":698,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Greek is Greek","url":"https://www.reddit.com/r/kubernetes/comments/1j9n9mr/greek_is_greek/","date":1741794906,"author":"/u/amarao_san","guid":342,"unread":true,"content":"<p>I'm looking at the Agones, and, given that I learn Greek language, I can't see it just as 'random nice-sound name'.</p><p>Αγώνες is plural of Αγώνας, which is 'fight' or 'battle'. And it also prononced with stress on 'o' ah-gO-nes (ah-gO-nas), and it have soft 'g' sound, which is different from English g (and closer to Ukrainian 'г').</p><p>Imagine someone call the software 'fights', and every one outside of English speaking world pronounce it as 'fee-g-h-t-s'.</p>","contentLength":464,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Best Practices for Multi‐Cluster OIDC Auth? (Keycloak)","url":"https://www.reddit.com/r/kubernetes/comments/1j9ms78/best_practices_for_multicluster_oidc_auth_keycloak/","date":1741793655,"author":"/u/8bitjohnny","guid":338,"unread":true,"content":"<p>I am trying to figure out the “industry standard” way of handling OIDC auth across multiple Kubernetes clusters with Keycloak, and could use some community support.</p><p>Background: I’ve got around 10 Kubernetes clusters and about 50 users, and I need to use Keycloak for OIDC to manage access. Right now I'm still in POC stage, but I’m running one Keycloak client per cluster, each client has two roles (admin and read-only), and users can be admin in some clusters and read-only in others. I am having trouble reconciling the roleBindings and their subjects in a way that feels functionally minimal. The way I see it I end up with either crazy roleBindings, crazy keycloak clients, or an unwieldly number of groups/roles, with some funky mappers thrown in.</p><p>My questions for you all:</p><ul><li>How do you handle multi-cluster RBAC when using Keycloak? How do you keep it manageable?</li><li>Would you stick to the one-client-per-cluster approach, or switch to one client with a bunch of group mappings?</li><li>If I have to expect it to be messy somewhere, where is better? Keycloak side or k8s side?</li></ul><p>Would love to hear your setups and any pitfalls you’ve run into! Thanks in advance.</p>","contentLength":1158,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"The 2005 Sony Bravia ad","url":"https://www.sfgate.com/sf-culture/article/san-francisco-sony-bouncy-ball-ad-20204385.php","date":1741792364,"author":"coloneltcb","guid":221,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43344129"},{"title":"Gemini Robotics brings AI into the physical world","url":"https://deepmind.google/discover/blog/gemini-robotics-brings-ai-into-the-physical-world/","date":1741792149,"author":"meetpateltech","guid":220,"unread":true,"content":"<div><p data-block-key=\"q2c97\">Introducing Gemini Robotics, our Gemini 2.0-based model designed for robotics</p><p data-block-key=\"3djrg\">At Google DeepMind, we've been making progress in how our Gemini models solve complex problems through multimodal reasoning across text, images, audio and video. So far however, those abilities have been largely confined to the digital realm. In order for AI to be useful and helpful to people in the physical realm, they have to demonstrate “embodied” reasoning — the humanlike ability to comprehend and react to the world around us— as well as safely take action to get things done.</p><p data-block-key=\"73qu7\">Today, we are introducing two new AI models, based on Gemini 2.0, which lay the foundation for a new generation of helpful robots.</p><p data-block-key=\"4he0s\">The first is Gemini Robotics, an advanced vision-language-action (VLA) model that was built on Gemini 2.0 with the addition of physical actions as a new output modality for the purpose of directly controlling robots. The second is Gemini Robotics-ER, a Gemini model with advanced spatial understanding, enabling roboticists to run their own programs using Gemini’s embodied reasoning (ER) abilities.</p><p data-block-key=\"dtsn7\">Both of these models enable a variety of robots to perform a wider range of real-world tasks than ever before. As part of our efforts, we’re partnering with Apptronik to build the next generation of humanoid robots with Gemini 2.0. We’re also working with a selected number of trusted testers to guide the future of Gemini Robotics-ER.</p><p data-block-key=\"im3d\">We look forward to exploring our models’ capabilities and continuing to develop them on the path to real-world applications.</p></div><div><h2 data-block-key=\"2q7pg\">Gemini Robotics: Our most advanced vision-language-action model</h2><p data-block-key=\"3d8qf\">To be useful and helpful to people, AI models for robotics need three principal qualities: they have to be general, meaning they’re able to adapt to different situations; they have to be interactive, meaning they can understand and respond quickly to instructions or changes in their environment; and they have to be dexterous, meaning they can do the kinds of things people generally can do with their hands and fingers, like carefully manipulate objects.</p><p data-block-key=\"5bthq\">While our previous work demonstrated progress in these areas, Gemini Robotics represents a substantial step in performance on all three axes, getting us closer to truly general purpose robots.</p><p data-block-key=\"at04h\">Gemini Robotics leverages Gemini's world understanding to generalize to novel situations and solve a wide variety of tasks out of the box, including tasks it has never seen before in training. Gemini Robotics is also adept at dealing with new objects, diverse instructions, and new environments. In <a href=\"https://storage.googleapis.com/deepmind-media/gemini-robotics/gemini_robotics_report.pdf\" rel=\"noopener\" target=\"_blank\">our tech report</a>, we show that on average, Gemini Robotics more than doubles performance on a comprehensive generalization benchmark compared to other state-of-the-art vision-language-action models.</p></div><div><p data-block-key=\"5merb\">To operate in our dynamic, physical world, robots must be able to seamlessly interact with people and their surrounding environment, and adapt to changes on the fly.</p><p data-block-key=\"lvkr\">Because it’s built on a foundation of Gemini 2.0, Gemini Robotics is intuitively interactive. It taps into Gemini’s advanced language understanding capabilities and can understand and respond to commands phrased in everyday, conversational language and in different languages.</p><p data-block-key=\"eo201\">It can understand and respond to a much broader set of natural language instructions than our previous models, adapting its behavior to your input. It also continuously monitors its surroundings, detects changes to its environment or instructions, and adjusts its actions accordingly. This kind of control, or “steerability,” can better help people collaborate with robot assistants in a range of settings, from home to the workplace.</p></div><div><p data-block-key=\"ev4ji\">The third key pillar for building a helpful robot is acting with <a href=\"https://deepmind.google/discover/blog/advances-in-robot-dexterity/\" rel=\"noopener\" target=\"_blank\">dexterity</a>. Many everyday tasks that humans perform effortlessly require surprisingly fine motor skills and are still too difficult for robots. By contrast, Gemini Robotics can tackle extremely complex, multi-step tasks that require precise manipulation such as origami folding or packing a snack into a Ziploc bag.</p></div><div><p data-block-key=\"2co1s\">Finally, because robots come in all shapes and sizes, Gemini Robotics was also designed to easily adapt to different robot types. We trained the model primarily on data from the bi-arm robotic platform, <a href=\"https://aloha-2.github.io/\" rel=\"noopener\" target=\"_blank\">ALOHA 2</a>, but we also demonstrated that it could control a bi-arm platform, based on the Franka arms used in many academic labs. Gemini Robotics can even be specialized for more complex embodiments, such as the humanoid Apollo robot developed by Apptronik, with the goal of completing real world tasks.</p></div><div><h2 data-block-key=\"2q7pg\">Enhancing Gemini’s world understanding</h2><p data-block-key=\"f1glf\">Alongside Gemini Robotics, we’re introducing an advanced vision-language model called Gemini Robotics-ER (short for ‘“embodied reasoning”). This model enhances Gemini’s understanding of the world in ways necessary for robotics, focusing especially on spatial reasoning, and allows roboticists to connect it with their existing low level controllers.</p><p data-block-key=\"6k4gb\">Gemini Robotics-ER improves Gemini 2.0’s existing abilities like pointing and 3D detection by a large margin. Combining spatial reasoning and Gemini’s coding abilities, Gemini Robotics-ER can instantiate entirely new capabilities on the fly. For example, when shown a coffee mug, the model can intuit an appropriate two-finger grasp for picking it up by the handle and a safe trajectory for approaching it.</p><p data-block-key=\"1lam2\">Gemini Robotics-ER can perform all the steps necessary to control a robot right out of the box, including perception, state estimation, spatial understanding, planning and code generation. In such an end-to-end setting the model achieves a 2x-3x success rate compared to Gemini 2.0. And where code generation is not sufficient, Gemini Robotics-ER can even tap into the power of in-context learning, following the patterns of a handful of human demonstrations to provide a solution.</p></div><div><h2 data-block-key=\"2q7pg\">Responsibly advancing AI and robotics</h2><p data-block-key=\"16hbn\">As we explore the continuing potential of AI and robotics, we’re taking a layered, <a href=\"https://sites.google.com/corp/view/safe-robots\" rel=\"noopener\" target=\"_blank\">holistic</a> approach to addressing safety in our research, from low-level motor control to high-level semantic understanding.</p><p data-block-key=\"7s8sj\">The physical safety of robots and the people around them is a longstanding, foundational concern in the science of robotics. That's why roboticists have classic safety measures such as avoiding collisions, limiting the magnitude of contact forces, and ensuring the dynamic stability of mobile robots. Gemini Robotics-ER can be interfaced with these ‘low-level’ safety-critical controllers, specific to each particular embodiment. Building on Gemini’s core safety features, we enable Gemini Robotics-ER models to understand whether or not a potential action is safe to perform in a given context, and to generate appropriate responses.</p><p data-block-key=\"3dcnu\">To advance robotics safety research across academia and industry, we are also releasing a new dataset to evaluate and improve semantic safety in embodied AI and robotics. In previous work, we showed how a <a href=\"https://deepmind.google/discover/blog/shaping-the-future-of-advanced-robotics/\" rel=\"noopener\" target=\"_blank\">Robot Constitution</a> inspired by Isaac Asimov’s Three Laws of Robotics could help prompt an LLM to select safer tasks for robots. We have since developed a framework to automatically generate data-driven constitutions - rules expressed directly in natural language – to steer a robot’s behavior. This framework would allow people to create, modify and apply constitutions to develop robots that are safer and more aligned with human values. Finally, the <a href=\"https://asimov-benchmark.github.io/\" rel=\"noopener\" target=\"_blank\">new ASIMOV dataset</a> will help researchers to rigorously measure the safety implications of robotic actions in real-world scenarios.</p><p data-block-key=\"ch213\">To further assess the societal implications of our work, we collaborate with experts in our Responsible Development and Innovation team and as well as our Responsibility and Safety Council, an internal review group committed to ensure we develop AI applications responsibly. We also consult with external specialists on particular challenges and opportunities presented by embodied AI in robotics applications.</p><p data-block-key=\"cis52\">In addition to our partnership with Apptronik, our Gemini Robotics-ER model is also available to trusted testers including Agile Robots, Agility Robots, Boston Dynamics, and Enchanted Tools. We look forward to exploring our models’ capabilities and continuing to develop AI for the next generation of more helpful robots.</p></div><div><p data-block-key=\"duspu\">This work was developed by the Gemini Robotics team. For a full list of authors and acknowledgements please view <a href=\"https://storage.googleapis.com/deepmind-media/gemini-robotics/gemini_robotics_report.pdf\" rel=\"noopener\" target=\"_blank\">our technical report</a>.</p></div>","contentLength":8374,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43344082"},{"title":"How to Setup Preview Environments with FluxCD in Kubernetes","url":"https://www.reddit.com/r/kubernetes/comments/1j9m657/how_to_setup_preview_environments_with_fluxcd_in/","date":1741792082,"author":"/u/meysam81","guid":339,"unread":true,"content":"<p>I just wrote a detailed guide on setting up GitOps-driven preview environments for your PRs using FluxCD in Kubernetes.</p><p>If you're tired of PaaS limitations or want to leverage your existing K8s infrastructure for preview deployments, this might be useful.</p><ul><li><p>Creating PR-based preview environments that deploy automatically when PRs are created</p></li><li><p>Setting up unique internet-accessible URLs for each preview environment</p></li><li><p>Automatically commenting those URLs on your GitHub pull requests</p></li><li><p>Using FluxCD's ResourceSet and ResourceSetInputProvider to orchestrate everything</p></li></ul><p>The implementation uses a simple Go app as an example, but the same approach works for any containerized application.</p><p>Let me know if you have any questions or if you've implemented something similar with different tools. Always curious to hear about alternative approaches!</p>","contentLength":827,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Kubernetes as a foundation for XaaS","url":"https://www.reddit.com/r/kubernetes/comments/1j9kygu/kubernetes_as_a_foundation_for_xaas/","date":1741788610,"author":"/u/dariotranchitella","guid":341,"unread":true,"content":"<p>If you're not familiar with the term,  stands for \"Everything as a Service\". By discussing with several software companies, Kubernetes has emerged as the ideal platform to embrace this paradigm: while it solves many problems, it also introduces significant challenges which I'll try to elaborate a bit more throughout the thread.</p><p>We all know Kubernetes works (sic) on any infrastructure and (again, sic) hardware by abstracting the underlying environment and leveraging application-centric primitives. This flexibility has enabled a wide range of innovative services, such as:</p><ul><li>, provided by companies like Kong.</li><li>, exemplified by solutions from EDB.</li><li>, with platforms like OpenShift Virtualization.</li></ul><p>These services are fundamentally powered by Kubernetes, where an Operator handles the service's lifecycle, and end users consume the resulting outputs by interacting with APIs or Custom Resource Definitions (CRDs).</p><p>This model works well in multi-tenant Kubernetes clusters, where a large infrastructure is efficiently partitioned to serve multiple customers: think of Amazon RDS, or MongoDB Atlas. However, complexity arises when deploying such XaaS solutions on tenants' own environments—be it their public cloud accounts or on-premises infrastructure.</p><p>This brings us to the concept of : each tenant may require a dedicated Kubernetes cluster for security, compliance, or regulatory reasons (e.g., SOC 2, GDPR, if you're European you should be familiar with it). The result is , where each customer potentially requires multiple clusters. This raises a critical question: <em>who is responsible for the lifecycle, maintenance, and overall management of these clusters?</em></p><p>Managed Kubernetes services like AKS, EKS, and GKE can ease some of this burden by handling the Control Plane. However, the true complexity of delivering XaaS with Kubernetes lies in managing multiple clusters effectively.</p><p>For those already facing the complexities of multi-cluster management (the proverbial  dilemma),  offers a promising solution. By creating an additional abstraction layer for cluster lifecycle management, Cluster API simplifies some aspects of scaling infrastructure. However, while Cluster API addresses certain challenges, it doesn't eliminate the complexities of deploying, orchestrating, and maintaining the \"X\" in XaaS — the unique business logic or service architecture that must run across multiple clusters.</p><p>Beyond cluster lifecycle management, additional challenges remain — such as handling diverse storage and networking environments. Even if these issues are addressed, organizations must still find effective ways to:</p><ul><li>Distribute software reliably to multiple clusters.</li><li>Perform rolling upgrades efficiently.</li><li>Gain visibility into logs and metrics for proactive support.</li><li>Enforce usage limits (especially for licensed software).</li><li>Simplify technical support for end users.</li></ul><p>At this stage, I'm not looking for clients but rather seeking a  interested in collaborating to build a new solution from the ground up, as well as engaging with the community members who are exploring or already explored XaaS models backed by Kubernetes and the  (Bring Your Own Cloud) approach. My goal is to develop a comprehensive suite for software vendors to deploy their services seamlessly across multiple cloud infrastructures — even on-premises — without relying exclusively on managed Kubernetes services.</p><p>I'm aware that companies like Replicated already provide similar solutions, but I'd love to hear about unresolved challenges, pain points, and ideas from those navigating this complex landscape.</p>","contentLength":3570,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Rust Newbies: What mistakes should I avoid as a beginner? Also, what IDE/setup do you swear by? 🦀","url":"https://www.reddit.com/r/rust/comments/1j9kv5w/rust_newbies_what_mistakes_should_i_avoid_as_a/","date":1741788360,"author":"/u/tusharg19","guid":357,"unread":true,"content":"<p>I’m just starting my Rust journey and could use your wisdom: 1. <strong>What mistakes did you make early on</strong> that I should avoid? (Borrow checker traps? Overcomplicating lifetimes? Let me learn from your pain!) 2. <strong>What IDE/tools do you recommend</strong> for a smooth coding experience? (VS Code? RustRover? Terminal plugins? Config tips?)</p><p>Drop your advice below—I’ll take all the help I can get! 🙏</p>","contentLength":388,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"What's up with Rust? • Tim McNamara","url":"https://youtu.be/pppU--kHLP0","date":1741786833,"author":"/u/goto-con","guid":355,"unread":true,"content":"<!DOCTYPE html>","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/rust/comments/1j9kbky/whats_up_with_rust_tim_mcnamara/"},{"title":"Implementing Cross-Site Request Forgery (CSRF) Protection in Go Web Applications","url":"https://themsaid.com/csrf-protection-go-web-applications","date":1741784350,"author":"/u/themsaid","guid":332,"unread":true,"content":"<p>In a <a href=\"https://themsaid.com/building-secure-session-manager-in-go\" rel=\"nofollow\">previous article</a>, we discussed web sessions and explained how a session is created when a visitor first browses our web application. This session is then stored in a browser cookie and sent on every subsequent request, allowing the server to identify the visitor.</p><p>Now, imagine you are logged into GitHub and there's a session cookie in your browser that's sent with every request to GitHub. What would happen if you visit a website that has this hidden form?</p><div><pre>=\"\" =\"\"=\"\" =\"\" =\"\"=\"\" =\"\" =\"\"</pre></div><p>The JavaScript code here submits a form that sends a POST request to the  endpoint with two hidden fields:  and . When the form is submitted, the browser detects an existing cookie for the  domain and includes it in the request. This triggers a transfer operation, moving one of your repositories to the attacker's account.</p><p>This type of attack is known as Cross-Site Request Forgery (CSRF or XSRF for short), and it can take many forms beyond the example described above. In general, a CSRF attack occurs when an attacker tricks a user into making an unintended request to a trusted website where they are already authenticated. Because the user's session cookie is automatically included in the request, the website processes it as if it were a legitimate action initiated by the user.</p><div><h2>Secure Cookies Alone Can't Stop CSRF Attacks</h2><a aria-label=\"Permalink: Secure Cookies Alone Can't Stop CSRF Attacks\" href=\"https://themsaid.com/csrf-protection-go-web-applications#secure-cookies-alone-cant-stop-csrf-attacks\"></a></div><p>A secure cookie is one that has the following attributes:</p><div><pre>http.{\n\t: ,\n\t:   ,\n\t: .,\n}</pre></div><p>Setting  prevents JavaScript from accessing the cookie,  ensures it is only sent over HTTPS, and <code>SameSite: http.SameSiteLaxMode</code> restricts cross-site cookie transmission.</p><p>You might assume that setting the  cookie attribute is sufficient to prevent cross-site requests. However, this is not always the case. Older browser versions do not consistently enforce this attribute, leaving them vulnerable to Cross-Site Request Forgery attacks. Additionally, clickjacking presents another risk. In this type of attack, an attacker embeds your application inside an invisible iframe and tricks users into clicking buttons or performing actions they didn’t intend. Since these interactions originate from the same domain, they bypass SameSite restrictions, allowing the attacker to execute unauthorized actions on behalf of the user.</p><blockquote><p>Lax enforcement provides reasonable defense in depth against CSRF attacks that rely on unsafe HTTP methods (like POST), but does not offer a robust defense against CSRF as a general category of attack. When possible, developers should use a session management mechanism to mitigate the risk of CSRF more completely.</p></blockquote><p>This emphasizes that while  provides some protection against CSRF attacks, it is not a complete solution. To fully mitigate the risk of CSRF, we should implement additional session management techniques, with the most common being the use of CSRF tokens.</p><p>The concept behind CSRF tokens is to establish a shared secret token between the client and the server. When a user first starts a session, the server generates a unique CSRF token and stores it alongside the session data. The server then sends this token to the client in the response. Each time the client makes a POST, PUT, DELETE, or PATCH request, it must include the CSRF token, typically within the body of the request or in a custom header, which the server verifies by comparing it to the one stored in the token.</p><p>Now, consider the CSRF attack example we shared earlier:</p><div><pre>=\"\" =\"\"=\"\" =\"\" =\"\"=\"\" =\"\" =\"\"</pre></div><p>When this form is submitted, the server will detect the missing CSRF token in the body and block the request. If the attacker includes an invalid token, the server will still reject the request upon recognizing that the token doesn't match the session's expected token.</p><p>In our application HTML template, we may share the token in the response in the form of a hidden field:</p><div><pre>=\"\" =\"\"\n\t/** CSRF token field **/\n\t=\"\" =\"\" =\"\"=\"\" =\"\"=\"\" =\"\"=\"\" </pre></div><p>When this form is submitted, the server will validate the CSRF token and allow the request.</p><p>Alternatively, if we use a JavaScript single page application (SPA), the server may share the CSRF token in a  tag:</p><div><pre></pre></div><p>The client reads it and includes it as a header when submitting a request:</p><div><pre>: : </pre></div><p>Finally, some popular JavaScript libraries (like <a href=\"https://v17.angular.io/guide/http-security-xsrf-protection\" rel=\"nofollow\">AngularJS</a> and <a href=\"https://axios-http.com/docs/req_config\" rel=\"nofollow\">Axios</a>) read the CSRF token from a cookie named . If we include this cookie in the response, the library will read it and send its value back on every request in the form of a  header.</p><div><h2>Adding CSRF Protection to the Session Manager</h2><a aria-label=\"Permalink: Adding CSRF Protection to the Session Manager\" href=\"https://themsaid.com/csrf-protection-go-web-applications#adding-csrf-protection-to-the-session-manager\"></a></div><p>Building on our <a href=\"https://themsaid.com/building-secure-session-manager-in-go\" rel=\"nofollow\">previous implementation</a> of a secure session manager in Go, we will now add CSRF protection to the session manager. This involves generating CSRF tokens, storing them in the session, and ensuring they are included with every state-changing request (POST, PUT, DELETE, and PATCH).</p><p>To generate a CSRF token, we will add a function that creates a 42-character base64 string with 256 bits of randomness:</p><div><pre>()  {\n\t([], )\n\n\t, .(., )\n\t {\n\t\t()\n\t}\n\n\t..()\n}</pre></div><p>Then, we'll ensure that a fresh CSRF token is created with every new session:</p><div><pre>()  {\n\t{\n\t\t:             (),\n\t\t:           []{: ()},\n\t\t:      .(),\n\t\t: .(),\n\t}\n}</pre></div><div><h3>Validating the CSRF Token</h3><a aria-label=\"Permalink: Validating the CSRF Token\" href=\"https://themsaid.com/csrf-protection-go-web-applications#validating-the-csrf-token\"></a></div><p>We will add a method to the session manager that extracts the CSRF token from a given session and validates it against the  form value or the  header:</p><div><pre> () (http., )  {\n\t, .().()\n\t {\n\t\t\n\t}\n\n\t.()\n\n\t {\n\t\t..()\n\t}\n\n\t\n}</pre></div><p>It's important to note that the form field name () and header name () are not fixed and can be customized. Here, I'm using common naming conventions for convenience. However, in your application, you may choose unique, less predictable names to add an extra layer of security.</p><div><h3>Performing the Validation</h3><a aria-label=\"Permalink: Performing the Validation\" href=\"https://themsaid.com/csrf-protection-go-web-applications#performing-the-validation\"></a></div><p>In our session manager's middleware, we will call the  method in the beginning of state-changing requests (POST, PUT, PATCH &amp; DELETE) and fail the request if the token doesn't match what's in the session:</p><div><pre>........ {\n\n\t.(, ) {\n\t\t.(, , .)\n\t\t\n\t}\n\n}\n\n.(, )</pre></div><p>With this setup, any state-changing request will be blocked before reaching the next handler in the chain, preventing an attacker from executing critical business logic.</p><p>The full code of the  method now looks like this:</p><div><pre> () ( http.) http. {\n\t.(( http., http.) {\n\t\t, .()\n\n\t\t{\n\t\t\t: ,\n\t\t\t: ,\n\t\t\t:        ,\n\t\t}\n\n\t\t.().(, )\n\t\t.().(, )\n\n\t\t........ {\n\t\t\t.(, ) {\n\t\t\t\t.(, , .)\n\t\t\t\t\n\t\t\t}\n\t\t}\n\n\t\t.(, )\n\n\t\t.()\n\n\t\t()\n\t})\n}</pre></div><div><h2>Using CSRF in the Web Application</h2><a aria-label=\"Permalink: Using CSRF in the Web Application\" href=\"https://themsaid.com/csrf-protection-go-web-applications#using-csrf-in-the-web-application\"></a></div><p>As we mentioned earlier, there are multiple ways to pass the CSRF token in the application responses:</p><ol></ol><p>If the frontend of our application submits typical HTML forms, we may pass the CSRF token down to the template as a template data parameter:</p><div><pre>.()\n\n.().()\n\n[]{\n\t: ,\n}\n\n.(, )</pre></div><p>Then, inside our form, we add a hidden field that includes the CSRF token:</p><div><pre>=\"\" =\"\"=\"\" =\"\" =\"\"=\"\" </pre></div><p>In the same way, we may include the CSRF token in a meta tag and read the value via JavaScript if the frontend uses JavaScript to submit forms:</p><div><pre>=\"\" =\"\"</pre></div><div><pre>: : </pre></div><p>Finally, if we're using a JavaScript library that supports the  cookie, we may send that cookie in the handler that presents the SPA view to the browser:</p><div><pre>.()\n\n.().()\n\nhttp.{\n\t:     ,\n\t:    ,\n\t:   ,\n\t: ,\n\t:     ,\n\t:   ,\n\t: .,\n}\n\n.(, )</pre></div><p>Storing the session ID in a secure cookie, which browsers only send for requests originating from the same domain, is an important security measure but is not enough to fully protect users from request forgery. To strengthen security, the token validation pattern presented in this article adds a crucial layer of protection.</p><p>By incorporating CSRF tokens into session management, we ensure that each request made to the server is not only coming from a trusted origin but also includes a valid token that proves the request was intentionally generated by the user. This pattern helps prevent malicious actors from exploiting session cookies to perform unauthorized actions on behalf of the user.</p>","contentLength":7704,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/golang/comments/1j9jh19/implementing_crosssite_request_forgery_csrf/"},{"title":"The DuckDB Local UI","url":"https://duckdb.org/2025/03/12/duckdb-ui.html","date":1741784161,"author":"xnx","guid":219,"unread":true,"content":"<div><p><em>TL;DR: The DuckDB team and MotherDuck are excited to announce the release of a local UI for DuckDB shipped as part of the  extension.</em></p></div><p>The DuckDB CLI provides advanced features like interactive multi-line editing, auto-complete, and progress indicators.\nHowever, it can be cumbersome for working with lengthy SQL queries, and its data exploration tools are limited.\nMany of the available third party UIs are great, but selecting, installing, and configuring one is not straightforward.\nUsing DuckDB through a UI should be as simple as using the CLI.\nAnd now it is!</p><p>Starting with <a href=\"https://github.com/duckdb/duckdb/releases/tag/v1.2.1\">DuckDB v1.2.1</a>, a full-featured local web user interface is available out-of-the-box!\nYou can start it from the terminal by launching the DuckDB CLI client with the  argument:</p><p>You can also run the following SQL command from a <a href=\"https://duckdb.org/docs/stable/clients/overview.html\">DuckDB client</a> (e.g., CLI, Python, Java, etc.):</p><p>Both of these approaches install the  extension (if it isn't installed yet),\nthen open the DuckDB UI in your browser:</p><p>The DuckDB UI uses interactive notebooks to define SQL scripts and show the results of queries.\nHowever, its capabilities go far beyond this.\nLet’s go over its main features.</p><blockquote><p>The DuckDB UI runs all your queries locally: your queries and data never leave your computer.\nIf you would like to use <a href=\"https://motherduck.com/\">MotherDuck</a> through the UI, you have to <a href=\"https://duckdb.org/2025/03/12/duckdb-ui.html#motherduck-integration\">opt-in explicitly</a>.</p></blockquote><p>Your attached databases are shown on the left.\nThis list includes in-memory databases plus any files and URLs you’ve loaded.\nYou can explore tables and views by expanding databases and schemas.</p><p>Click on a table or view to show a summary below.\nThe UI shows the number of rows, the name and type of each column, and a profile of the data in each column.</p><p>Select a column to see a more detailed summary of its data.\nYou can use the  button near the top right to inspect the first 100 rows.\nYou can also find the SQL definition of the table or view here.</p><p>You can organize your work into named notebooks.\nEach cell of the notebook can execute one or more SQL statements.\nThe UI supports syntax highlighting and autocomplete to assist with writing your queries.</p><p>You can run the whole cell, or just a selection,\nthen sort, filter, or further transform the results using the provided controls.</p><p>The right panel contains the <a href=\"https://motherduck.com/blog/introducing-column-explorer/\">Column Explorer</a>, which shows a summary of your results.\nYou can dive into each column to gain insights.</p><p>If you would like to connect to <a href=\"https://motherduck.com/\">MotherDuck</a>, you can sign into MotherDuck to persist files and tables to a <a href=\"https://motherduck.com/docs/getting-started/\">cloud data warehouse</a> crafted for using DuckDB at scale and sharing data with your team.</p><p>The DuckDB UI is under active development. Expect additions and improvements!</p><p>Like the DuckDB CLI, the DuckDB UI creates some files in the  directory in your home directory.\nThe UI puts its files in a sub-directory, :</p><ul><li>Your notebooks and some other state are stored in a DuckDB database, .</li><li>When you export data to the clipboard or a file (using the controls below the results), some tiny intermediate files (e.g. ) are generated.\nYour data is cleared from these files after the export is completed, but some near-empty files remain, one per file type.</li></ul><p>Support for the UI is implemented in a <a href=\"https://duckdb.org/docs/stable/extensions/overview.html\">DuckDB extension</a>.\nThe extension embeds a localhost HTTP server, which serves the UI browser application, and also exposes an API for communication with DuckDB.\nIn this way, the UI leverages the native DuckDB instance from which it was started, enabling full access to your local memory, compute, and file system.</p><p>Results are returned in an efficient binary form closely matching DuckDB’s in-memory representation (<a href=\"https://github.com/duckdb/duckdb/blob/v1.2.1/src/include/duckdb/common/types/data_chunk.hpp\">DataChunk</a>).\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events\">Server-sent events</a> enable prompt notification of updates such as attaching databases.\nThese techniques and others make for a low-latency experience that keeps you in your flow.</p><p>In this blog post, we presented the new DuckDB UI, a powerful web interface for DuckDB.</p><p>The DuckDB UI shares many of its design principles with the DuckDB database.\nIt’s simple, fast, feature-rich, and portable, and runs locally on your computer.\nThe DuckDB UI extension is also open source: visit the <a href=\"https://github.com/duckdb/duckdb-ui\"> repository</a> if you want to dive in deeper into the extension's code.</p><blockquote><p>The repository does not contain the source code for the frontend, which is currently not available as open-source.\nReleasing it as open-source is under consideration.</p></blockquote>","contentLength":4249,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43342712"},{"title":"Peer-to-peer file transfers in the browser","url":"https://github.com/kern/filepizza","date":1741781323,"author":"keepamovin","guid":218,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43342361"},{"title":"The Future Is Niri","url":"https://ersei.net/en/blog/niri","date":1741779736,"author":"mattjhall","guid":217,"unread":true,"content":"<p>The worst  I have is that I've been using <a href=\"https://en.wikipedia.org/wiki/Tiling_window_manager\">tiling window managers</a> for thirty-five percent of my life: five years with <a href=\"https://github.com/swaywm/sway\">Sway</a> and two with <a href=\"https://github.com/i3/i3\">i3</a>. As the realization of those numbers (and my age) dawns upon me, an irresistible urge wells up in my chest, threatening to overwhelm me. I try to tamp it down, but the urge is too strong—I must .</p><p>This may be worse than finding grey hairs.</p><p>I switched to Wayland before it was cool, so a lot of stuff was broken, and I got used to it being broken, much like my entire Linux-on-modern-laptop experience. I was  with Sway, since I had gotten used to the workflow over the years. After all, it was what all the  online were using, and I was too young to make good decisions. I went about my life, going through most of high school and all of college with a tiling window manager, dismissing alternatives as straying from the  set forth by anonymous forum-goers.</p><p>Sway  me (emotionally) with a click-and-drag issue where selecting text and dragging the selection (a pretty bog-standard thing people do with their computers)  somehow to keep the selection happening after you released the mouse.</p><p>My decades of muscle memory stopped working—I felt lost, adrift on a rough sea, the hot sun bearing down on me. Would I (the bug) ever be rescued (fixed)? Only time would tell, but I was getting desperate.</p><p>At first, I thought I could handle it and someone would quickly fix the bug. Days turned into weeks, and I was losing my mind. The Sway IRC was silent to my pleads for help, and I had developed a Pavlovian response to clicking on text to highlight it—a burst of panic in my chest as I dread the mouse continuing to drag after I had let go.</p><p>Naturally, instead of figuring out what library made a breaking change and spending four hours running , I decided to throw nearly a decade of muscle-memory and workflow refinements out the window. I was getting bored of Sway anyway. Let's switch to <a href=\"https://github.com/YaLTeR/niri\">Niri</a>!</p><p>For those unaware, Niri is a scrollable-tiling window manager: each workspace is an infinitely-wide strip you can scroll side-to-side on. It's easier to show their official demo video than to try to explain it with words (you don't have to watch the whole thing):</p><p>It was new, , , and most of all, really cool. I just  to try it, transporting me back to my youth distro-hopping and window-manager-hopping(?) with reckless abandon.</p><p>It seems to be a <a href=\"https://ersei.net/en/blog/its-nixin-time\">recurring theme</a>, throwing myself into a new productivity-altering technology in March when I should be doing more important things instead.</p><p>It wasn't as bad this time around! Within a few hours, I had a setup that worked fine enough. Within a week, I had Niri working better than Sway, and I was greatly enjoying the changes (read: improvements) it brought.</p><ol><li><p>Opening a window does not alter other windows: I can keep my focus and Firefox doesn't scroll to another dimension if I open a terminal in its vicinity.</p></li><li><p>Unlike Sway, Niri supports per-window screensharing, as well as \"blackout window from appearing in screen sharing\". I've been streaming my homework and it's much nicer without needing to worry about an email notification from my bank showing up in the top corner.</p></li></ol><ol start=\"4\"><li>Niri has increased my battery life by about two hours compared to Sway.</li></ol><p>I was so excited about Niri that I tried my hand at adding a feature to its IPC for something or the other, and I greatly enjoyed it! Unlike Sway/<a href=\"https://gitlab.freedesktop.org/wlroots/wlroots\">wlroots</a>, Niri/<a href=\"https://github.com/Smithay/smithay\">Smithay</a> are written in Rust and are surprisingly accessible to hack on.</p><p>I genuinely can't see myself going back to a traditional tiling window manager, Niri just brings too many improvements to my workflow.</p><h2>The Death of the Traditional Tiling Window Manager<a href=\"https://ersei.net/en/blog/niri#the-death-of-the-traditio\" data-anchor-icon=\"#\" aria-label=\"Anchor\"></a></h2><p>Traditional tiling window managers have a side effect of forcing you to be as efficient as possible with your window layout. There is an additional cognitive load incentivizing you to optimize for the wrong thing: minimizing window reflows. If you don't find yourself constantly swapping between fullscreen and non-fullscreen views and running out of workspaces, you don't have very many windows open. Don't even get me started on tabbed/stacked layouts with nested containers, the least ergonomic Band-Aid™ for the space issue I've ever seen.</p><p>After many  years of optimizing for the wrong thing with Sway, Niri blesses me with the realization that I can have the speed of a traditional tiling window manager without the space limitations.</p><p>On Sway, I often had  workspaces open. Ever since I switched to a tiling window manager, I kept running out of space and added shortcuts to workspaces 11-20. I drilled it into myself to close windows when I was done with them, often losing my flow when I come back to the projects I closed, all to save  I feel should be infinite. With Niri, I can have three large projects open, various chat apps, a YouTube video, and three classes worth of schoolwork and never use more than five workspaces. The same setup would have me spilling into workspace  on Sway, and I would quickly get confused and forget where I put my math textbook, switching between each workspace until I find the right one, often the very last one I check!</p><p>Wow, I did not realize how much repressed anger I had at traditional tiling window managers until now.</p><p>Given the variety of screen sizes and improved processing power I do not think that the traditional tiling window manager ought to be the power-user workflow of choice. It artificially limits space, forces content reflows, and does not work well with nonstandard monitor layouts.</p><p>If you are using Sway or another Wayland traditional tiling window manager, you should try Niri. Right now. My configurations are <a href=\"https://git.sr.ht/~fd/nix-configs/tree/trunk/item/home/common/wayland/niri.kdl\">published on Sourcehut</a> if you want to have a Sway-like experience with my keybindings.</p><p>Go on then, what are you waiting for?</p>","contentLength":5728,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43342178"},{"title":"Microservices: The Architectural Cult That’s Bankrupting Your Sanity (and Your Startup)","url":"https://medium.com/mr-plan-publication/microservices-the-architectural-cult-thats-bankrupting-your-sanity-and-your-startup-877e33453785?sk=0d5e112b5ed7b53ea0633f83a9b2c57a","date":1741779619,"author":"/u/TerryC_IndieGameDev","guid":349,"unread":true,"content":"<p>You’re debugging a payment failure at 2 AM when Slack explodes:<em>“Why is Kubernetes pod #4281 mining Bitcoin?!”</em></p><p>As you chug cold coffee, a horrifying realization hits: <strong>Your “modern” architecture has become a distributed game of Jenga.</strong> And like every overconfident engineer who came before you, you’re one shaky service mesh away from total collapse.</p><p>Welcome to the microservices lie.</p><p>Remember when software had ? When you could trace a bug from frontend click to database query without needing a PhD in distributed tracing?</p><p>The early cloud pioneers sold us a beautiful dream: <em>“Break your monolith into microservices! Scale components independently! Innovate faster!”</em> What they didn’t mention? </p>","contentLength":705,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1j9i2du/microservices_the_architectural_cult_thats/"},{"title":"First Ammonia-Fueled Ship Hits a Snag","url":"https://spectrum.ieee.org/ammonia-fuel-2671266100","date":1741778680,"author":"pseudolus","guid":216,"unread":true,"content":"<p>The , an oil platform supply shipundergoing a pioneering retrofit to run on <a href=\"https://spectrum.ieee.org/tag/ammonia\">ammonia</a> fuel, is now scheduled to begin operations in 2026—two years later than initially planned. Once completed, it will be the first vessel capable of operating full-time on ammonia, marking a major milestone in efforts to reduce <a href=\"https://spectrum.ieee.org/tag/carbon-dioxide\">carbon dioxide</a> (CO) emissions in the maritime industry.</p><p>Industry experts attribute the delay to the complex infrastructure required to handle ammonia safely. “Ammonia is toxic, explosive, and corrosive. We must use special piping, storage tanks, and trucks outfitted with materials engineered to be both leakproof and resistant to ammonia’s corrosive properties,” says <a href=\"https://spectrum.ieee.org/port-electrification\" target=\"_self\">John Prousalidis</a>, a professor of marine engineering at the <a href=\"https://www.ntua.gr/en/\" rel=\"noopener noreferrer\" target=\"_blank\">National Technical University of Athens</a>. </p><p>A spokesperson for Wärtsilä told  that the delay has not been related to performance or safety issues, but to “ the challenges of being at the forefront of maritime decarbonization.” The spokesperson explains that the project “was </p><p>Being first comes with a set of challenges that must be overcome. One of the biggest environmental concerns with ammonia-powered ships is the potential release of nitrogen oxides. “Instead of CO, which contributes to <a href=\"https://spectrum.ieee.org/tag/global-warming\">global warming</a>, we could end up with nitrogen oxides, which are lethal to breathe,” says Prousalidis. “To avoid simply swapping one pollutant for another, ammonia propulsion systems must include emissions-control technologies to prevent harmful nitrogen oxides from entering the atmosphere,” he adds.</p><p>A promising alternative to combustion engines is ammonia-powered fuel cells like the one originally slated to power the  Fuel cells generate electricity without producing nitrogen oxide emissions. By avoiding combustion entirely, these fuel cells allow ammonia’s nitrogen content to remain in its inert form, eliminating a key health risk.</p><h2>Ammonia Fuel Delays for </h2><p>Despite the challenges, experts believe ammonia could become a mainstream maritime fuel—but not overnight. “Twenty or thirty years ago, the shipping industry made a major shift to <a href=\"https://spectrum.ieee.org/tag/natural-gas\">natural gas</a>, believing it was the fuel of the future. Now, we know it wasn’t the right step,” says Prousalidis.</p><p>Looking back at past fuel transitions, he noted that each shift—from steam to oil, and then to natural gas—took around 20 years to achieve full adoption. He expects a similar timeline for the adoption of ammonia or hydrogen. “We need to be patient while persisting in our efforts and not getting discouraged by early challenges.”</p><p>That perspective aligns with what Equinor’s vice president of renewable and low-carbon technology, Henriette Undrum, told  in 2021 when she urged the public to be patient: “We are not just solving one small problem for one ship. It’s part of the bigger picture. It will be a starting point to build up the market for zero-carbon fuels.”</p><p>“Seaports are already undergoing an energy transformation,” says Prousalidis. “It would make sense for them to operate as energy hubs—producing, storing, and trading <a href=\"https://spectrum.ieee.org/tag/alternative-fuels\">alternative fuels</a> for fuel cells and other power-generation devices.” By doing so, he says, ports could turn a profit while also breaking the stalemate and contributing to global <a href=\"https://spectrum.ieee.org/tag/decarbonization\">decarbonization</a> efforts.</p><p>Although concerns about nitrogen oxide emissions remain, companies are reportedly designing post-combustion systems, analogous to the catalytic converters in automobile exhaust systems, to filter out harmful byproducts.  A technique called selective catalytic reduction converts nitrogen oxides into nitrogen and water. Ammonia slip catalysts capture unburned ammonia and break it down into the same two inert products. </p>","contentLength":3693,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43342071"},{"title":"KDE Plasma 6.3.3, Bugfix Release for March","url":"https://kde.org/announcements/plasma/6/6.3.3/","date":1741777988,"author":"/u/gabriel_3","guid":347,"unread":true,"content":"<section><p>You can give us feedback and get updates on our social media channels:\n<a href=\"https://go.kde.org/matrix/#/#kde:kde.org\" aria-label=\"Share on Matrix\"></a><a href=\"https://floss.social/@kde\" aria-label=\"Share on Mastodon\"></a><a href=\"https://bsky.app/profile/kde.org\" aria-label=\"Share on Bluesky\"></a><a href=\"https://www.facebook.com/kde/\" aria-label=\"\"></a><a href=\"https://www.linkedin.com/company/29561/\" aria-label=\"Share on LinkedIn\"></a><a href=\"https://www.reddit.com/r/kde/\" aria-label=\"Share on Reddit\"></a><a href=\"https://lemmy.kde.social/\" aria-label=\"Share on Lemmy\"></a><a href=\"https://www.youtube.com/@KdeOrg\" aria-label=\"Share on YouTube\"></a><a href=\"https://tube.kockatoo.org/a/kde_community/video-channels\" aria-label=\"Share on PeerTube\"></a><a href=\"https://vk.com/kde_ru\" aria-label=\"Share on VK\"></a><a href=\"https://www.instagram.com/kdecommunity/\" aria-label=\"Share on Instagram\"></a></p><p align=\"justify\">Your feedback is greatly appreciated.</p></section><p align=\"justify\">KDE is a <a href=\"https://www.gnu.org/philosophy/free-sw.html\">Free Software</a> community that exists and grows only because of the help of many volunteers that donate their time and effort. KDE is always looking for new volunteers and contributions, whether it is help with coding, bug fixing or reporting, writing documentation, translations, promotion, money, etc. All contributions are gratefully appreciated and eagerly accepted. Please read through the <a href=\"https://kde.org/community/donations/\">Supporting KDE page</a> for further information or become a KDE e.V. supporting member through our <a href=\"https://kde.org/community/donations/\">Join the Game</a> initiative.</p><p align=\"justify\">KDE is an international technology team that creates free and open source software for desktop and portable computing. Among KDE’s products are a modern desktop system for Linux and UNIX platforms, comprehensive office productivity and groupware suites and hundreds of software titles in many categories including Internet and web applications, multimedia, entertainment, educational, graphics and software development. KDE software is translated into more than 60 languages and is built with ease of use and modern accessibility principles in mind. KDE’s full-featured applications run natively on Linux, BSD, Windows, Haiku, and macOS.</p>","contentLength":1271,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/linux/comments/1j9hn5a/kde_plasma_633_bugfix_release_for_march/"},{"title":"Metadata routing in scikit-learn","url":"https://www.youtube.com/watch?v=lQ_-Aja-slA","date":1741775422,"author":"probabl","guid":541,"unread":true,"content":"<article>Metadata routing is a relatively new feature that allows you to, as the name implies, route metadata to different components in your machine learning setup. It's especially useful for things like sample_weight, which require data per row of your input to be passed along. But you can imagine many elaborate usecases such as (custom) estimators but also (custom) scorers. This video explains how they work. \n\nScikit-learn documentation:\nhttps://scikit-learn.org/stable/metadata_routing.html\n\nWebsite: https://probabl.ai/\nLinkedIn: https://www.linkedin.com/company/probabl\nTwitter: https://x.com/probabl_ai\nBluesky: https://bsky.app/profile/probabl.bsky.social\nDiscord: https://discord.probabl.ai\n\nWe also host a podcast called Sample Space, which you can find on your favourite podcast player. All the links can be found here:\nhttps://rss.com/podcasts/sample-space/\n\n#probabl</article>","contentLength":874,"flags":null,"enclosureUrl":"https://www.youtube.com/v/lQ_-Aja-slA?version=3","enclosureMime":"","commentsUrl":null},{"title":"We launched serverless hosting option for Rust apps","url":"https://www.reddit.com/r/rust/comments/1j9gpz9/we_launched_serverless_hosting_option_for_rust/","date":1741774303,"author":"/u/OfficeAccomplished45","guid":358,"unread":true,"content":"<p>I’ve been deploying Rust apps (Rocket) for a while (and some parts of this service are even built with Rust), and one thing that always bothered me was the cost—especially when you have small projects that don’t get much traffic.</p><ul><li> – Many hosting providers charge you 24/7, even if your app is inactive most of the time.</li><li><strong>Multiple apps, multiple bills</strong> – Want to run a few small Rust services? You'll likely end up paying for each one individually, even with minimal traffic.</li></ul><p>I wanted to address this, so I built Leapcell. It’s a serverless platform where you can deploy Rust apps instantly, get a URL, and only pay for actual usage—no more paying for idle time.</p><p>If you’ve struggled with the cost of Rust hosting, I’d love to hear your feedback!</p>","contentLength":756,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Weekly: Share your EXPLOSIONS thread","url":"https://www.reddit.com/r/kubernetes/comments/1j9gk1g/weekly_share_your_explosions_thread/","date":1741773631,"author":"/u/gctaylor","guid":337,"unread":true,"content":"<div><p>Did anything explode this week (or recently)? Share the details for our mutual betterment.</p></div>   submitted by   <a href=\"https://www.reddit.com/user/gctaylor\"> /u/gctaylor </a>","contentLength":121,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"What′s new in Java 24","url":"https://pvs-studio.com/en/blog/posts/java/1233/","date":1741771073,"author":"/u/Xaneris47","guid":353,"unread":true,"content":"<ul></ul><p>On March 18, a new Java version is set to arrive! Let's take a peek at new features, including the long-awaited final implementation of Stream Gatherers!</p><div><p>The order of the JEPs (JDK Enhancement Proposal) presented here is based on our assessment of their \"interestingness\" rather than their official numbering.</p></div><h2>JEP 485: Stream Gatherers</h2><p>As you know, Stream API operations are divided into  operations that generate a new  and  operations that create a result or have a side effect. However, terminal operations have , which allows us to create custom operations via the  implementation. The set of intermediate ones has only , , , , , , and . That's the case—until Java 24, which introduces .</p><p>The key points of the new feature are as follows:</p><p>1. New  method added to .</p><p>2. New <code>java.util.stream.Gatherer</code> interface, which consists of four methods:</p><ul><li> creates an initial intermediate state using ;</li><li> handles elements, optionally uses the intermediate state, and sends results further down the stream. It relies on the new  functional interface.</li><li> merges states using ;</li><li> performs on the intermediate state and sends the result further down the stream after all elements have been processed. It uses .</li></ul><p>3. New <code>java.util.stream.Gatherers</code> class, which provides several standard implementations of :</p><ul><li> is similar to the  operation;</li><li> performs incremental accumulation;</li><li> is a standard implementation of Fixed Window;</li><li> is a standard implementation of Sliding Window.</li></ul><div><div><p>The Sliding Window technique creates a window of the N size over the input data and then shifts that window. A simple example with a number array and a window size of 3 illustrates this concept:</p><p>The result of this operation is  containing all the subarrays highlighted by the blue frame.</p><p>With Gatherers, we can easily output all subarrays as follows:</p><pre><code>public static void main(String[] args) {\n    var list = List.of(\n        \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \n        \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"\n    );\n    int k = 3;\n\n    list.stream()\n        .gather(Gatherers.windowSliding(k))\n        .forEach(sublist -&gt; System.out.printf(\"%s \", sublist));\n    System.out.println();\n}</code></pre><p>[1, 2, 3] [2, 3, 4] [3, 4, 5] [4, 5, 6] [5, 6, 7] [6, 7, 8] [7, 8, 9] [8, 9, 10] [9, 10, 11] [10, 11, 12] [11, 12, 13] [12, 13, 14]</p><p>Fixed Window has a similar implementation—except that the shift is equal to the window size.</p><p>The usage remains the same:</p><pre><code>public static void main(String[] args) {\n    var list = List.of(\n        \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\n        \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"\n    );\n    int k = 3;\n\n    list.stream()\n        .gather(Gatherers.windowFixed(k))\n        .forEach(sublist -&gt; System.out.printf(\"%s \", sublist));\n    System.out.println();\n}</code></pre><p>[1, 2, 3] [4, 5, 6] [7, 8, 9] [10, 11, 12] [13, 14]</p></div></div><p>In addition to creating custom classes that implement , Java provides static factory methods:</p><ul><li><code>Gatherer.ofSequential(integrator)</code></li></ul><p>Both methods have variations with different additional arguments in the form of functional interfaces—, , , and —which were mentioned earlier.</p><p>A custom API to work with class files was introduced in JDK 22. Now, with JDK 24, this API has been finalized!</p><p>The rapid Java development in recent years has led to frequent and regular bytecode updates with which standard tools like , , and others interact. They use libraries like ASM for this interaction. To support new bytecode versions, tools should wait for library updates—yet libraries, in turn, wait for the final implementation of new JDK versions. This dependency chain slows down the development and adoption of new class file features.</p><p>While this API may not be directly useful for most developers, it's essential for various frameworks and libraries—including Spring and Hibernate—that work with bytecode and use ASM. The problem is that older ASM versions are incompatible with newer JDK releases. If we need to update the JDK version in a project, ASM must be updated as well—so, we need to update everything that depends on it... well, almost everything. Yet we just wanted to upgrade the JDK version.</p><p>Let's explore a new API. After experimenting with it, we've put together a simple example that reads static constant primitive fields (a basic understanding of class-file structures is required):</p><pre><code>public class ClassFileExample {\n\n  public static void main(String[] args) throws IOException {\n    var classFile = ClassFile.of().parse(Path.of(\"./Main.class\"));\n\n    for (var field : classFile.fields()) {\n      var flags = field.flags();\n      if (flags.has(AccessFlag.STATIC) &amp;&amp; flags.has(AccessFlag.FINAL)) {\n        System.out.printf(\"static final field %s = \", field.fieldName());\n        var value = field.attributes().stream()\n          .filter(ConstantValueAttribute.class::isInstance)\n          .map(ConstantValueAttribute.class::cast)\n          .findFirst()\n          .map(constant -&gt; constant.constant().constantValue().toString())\n          .orElse(\"null\");\n        System.out.printf(\"%s%n\", value);\n      }\n    }\n  }\n}</code></pre><p>This can be surprisingly helpful because reflection leads to class initialization. One day, we might delve into the consequences of such  initialization.</p><p>Developers familiar with ASM may notice that the authors chose not to use the  pattern because of Java's new features, particularly pattern matching.</p><h2>JEP 483: Ahead-of-Time Class Loading &amp; Linking</h2><p>This new feature aims to streamline application loading time. To achieve this, Java now enables caching of loaded classes. The process of generating and using this cache consists of three steps:</p><p>1. <strong>Generating the AOT configuration</strong>. Run the application with the  flag and specify the output file path via <code>-XX:AOTConfiguration=PATH</code>:</p><p><code>java -XX:AOTMode=record -XX:AOTConfiguration=app.aotconf -jar app.jar</code></p><p>2. <strong>Generating the cache with configuration</strong>. Change the  mode to  and specify the cache output path using the  flag:</p><p><code>java -XX:AOTMode=create -XX:AOTConfiguration=app.aotconf -XX:AOTCache=app.aot -jar app.jar</code></p><p>3. <strong>Running the application using the cache</strong>. Use only the  flag:</p><p><code>java -XX:AOTCache=app.aot -jar app.jar</code></p><p>According to JEP, the loading time for a simple program using the  decreased from 0.031 seconds to 0.018 seconds (a 42% difference). The loading time for a Spring-based project (Spring PetClinic) dropped from 4.486 seconds to 2.604 seconds.</p><p>I also looked at the simple Quarkus application from the recently published book  (<a href=\"https://github.com/xstefank/quarkus-in-action/tree/main\" target=\"_blank\" rel=\"nofollow\">GitHub</a>). The loading time decreased from 3.480 to 2.328 seconds (a 39.67% decrease).</p><h2>JEP 491: Synchronize Virtual Threads without Pinning</h2><p>This JEP resolves the issue of platform thread blocking when using virtual threads in  blocks. To understand the impact of this change, let's first take a look at <a href=\"https://openjdk.org/projects/loom/\" target=\"_blank\" rel=\"nofollow\">Project Loom</a> and, more specifically, virtual threads.</p><p>When virtual threads were introduced in <a href=\"https://openjdk.org/jeps/444\" target=\"_blank\" rel=\"nofollow\">JEP 444</a>, two scenarios were specified in which they wouldn't release the platform thread they were using when blocked:</p><ul><li>Blocking occurs in a  block;</li><li>Blocking occurs in native methods—whether they're JNI or Foreign Functions.</li></ul><p>Now, the first case is invalid. Developers are now free to choose between using the  keyword and the <code>java.util.concurrent.locks</code> package, allowing them to focus solely on the specific requirements of their task.</p><h2>JEP 490: ZGC: Remove the Non-Generational Mode</h2><p>Z Garbage Collector (ZGC) used to support two modes:  and . Since Generational ZGC is the preferred option in most cases, developers have decided to streamline further ZGC support by disabling one of the modes, Non-Generational. The  flag is now deprecated, and the warning message will be displayed if it's used:</p><h2>JEP 498: Warn upon Use of Memory-Access Methods in sun.misc.Unsafe</h2><p>If memory-related methods from  are called, the warning will be issued. These changes align with the transition toward modern alternatives such as the  and the <code>Foreign Function &amp; Memory API</code>. Additionally, they pass Java closer to removing memory-related methods from , which have already been marked as . This update also encourages library developers to migrate to the new APIs.</p><h2>JEP 472: Prepare to Restrict the Use of JNI</h2><p>Using  (JNI) and <code>Foreign Function &amp; Memory</code> (FFM) now issues a warning:</p><p>This is the first step in restricting the use of JNI and FFM. In the future, an exception should be thrown for the code. However, this doesn't mean these features will be removed—which would be ironic, since FFM was released in Java 22. This step is needed for the policy of integrity by default. It just means that developers, who enable native access, should explicitly state that they consider unsafe features of the JDK.</p><h2>JEP 493: Linking Run-Time Images without JMOD</h2><p>The <code>‑‑enable-linkable-runtime</code> flag, introduced for JDK builds, allows  to create images without relying on  files from the JDK. This optimization reduces the final image size by 25%.</p><div><div><p>JMOD files have been around since Project Jigsaw (Java 9) and are used in the optional linking phase when using  to create a space-optimized JRE.</p><p>Unlike JAR files, JMODs can store not only  files and resources but also native libraries, licenses, and executables, which are then included in the final JRE. However, JAR files may be sufficient for developing standard applications, there is no need to use JMOD. Additionally, JMOD documentation is severely lacking. </p></div></div><p>Although this change doesn't directly impact developers, it's particularly relevant for containers or when creating minimal runtime images. However, this optimization isn't enabled by default—it's up to individual JDK providers to decide whether to implement it.</p><p>For example, Eclipse Temurin has already <a href=\"https://github.com/adoptium/temurin-build/issues/4035\" target=\"_blank\" rel=\"nofollow\">started</a> using this flag, and GraalVM has <a href=\"https://github.com/graalvm/mandrel/issues/808\" target=\"_blank\" rel=\"nofollow\">added</a> support for such builds as well.</p><h2>JEP 486: Permanently Disable the Security Manager</h2><p>Preparations for disabling <code>java.lang.SecurityManager</code> started back in Java 17, when it was marked  due to the rare usage of this class at high maintenance costs. Now let's go to the changes.</p><p>The  flag (in any form) is no longer supported and causes an error, except for <code>-Djava.security.manager=disallow</code>:</p><p>Calling <code>System::setSecurityManager</code> throws an <code>UnsupportedOperationException</code> exception.</p><p>System properties related to  are now ignored, and the <code>conf/security/java.policy</code> file has been removed.</p><p>Other changes are documentation-related, for example, references to  and  have been removed.</p><p>It should be noted that the classes and methods aren't removed but degraded to \"empty\"—they either return , , pass through the caller's request, or throw a  or <code>UnsupportedOperationException</code>.</p><h2>JEP 479: Remove the Windows 32-bit x86 Port</h2><p>Support for Windows 32-bit x86 is finally being discontinued. This facilitates the build and test infrastructure, freeing up resources that are no longer needed to maintain the platform.</p><p>One of the reasons for removing this port is the lack of support for , which fall back to classic . Additionally, support for the latest 32-bit version of Windows 10 will end in October 2025.</p><h2>JEP 501: Deprecate the 32-bit x86 Port for Removal</h2><p>The fate of the other 32-bit platforms is clear: they'll be removed, but not in this release.</p><p>So, Linux remains the last 32-bit supported platform. Building the 32-bit version now requires adding the <code>‑‑enable-deprecated-ports=yes</code> flag:</p><pre><code>bash ./configure –enable-deprecated-ports=yes</code></pre><p>However, the complete removal of this port is expected as early as Java 25.</p><h2>JEP 496: Quantum-Resistant Module-Lattice-Based Key Encapsulation Mechanism</h2><p>This and the following JEP focus on post-quantum cryptography.</p><p>Post-quantum cryptography refers to the creation of cryptographic algorithms that will be effective even after the advent of quantum computers. </p><p>According to the FIPS 203 standard, the  implementation for , ,  APIs, namely , , and  has been introduced. Now we can generate the key pairs as follows:</p><pre><code>KeyPairGenerator generator = KeyPairGenerator.getInstance(\"ML-KEM-1024\");\nKeyPair keyPair = generator.generateKeyPair();</code></pre><h2>JEP 497: Quantum-Resistant Module-Lattice-Based Digital Signature Algorithm</h2><p>As a follow-up to the previous JEP, according to the FIPS 204 standard, the implementation for , ,  APIs, namely , , and  has been added. Similar to the previous point, let's look at an example of obtaining an appropriate signature:</p><pre><code>Signature signature = Signature.getInstance(\"ML-DSA\");</code></pre><h2>JEP 475: Late Barrier Expansion for G1</h2><p>A final JEP that doesn't directly impact Java developers involves changes to the Garbage-First (G1) garbage collector, shifting the implementation of its barriers to a later C2 JIT compilation stage. This adjustment aims to simplify barrier logic for future developers while also reducing C2 compilation time.</p><p>Beyond this list of new features, some changes remain in the Preview or Experimental status.</p><p>Hopefully, one of the upcoming releases will enable us to see these innovations in action.</p><p>You can explore the full list of the JEP links <a href=\"https://openjdk.org/projects/jdk/24/\" target=\"_blank\" rel=\"nofollow\">here</a>.</p><p>Java continues to evolve at a brisk pace, and the introduction of the  reduces the number of dependencies, accelerating updates across the platform even further. That wraps up the Java 24 release for now—so once again, we turn our attention to the long-awaited <a href=\"https://openjdk.org/projects/valhalla/\" target=\"_blank\" rel=\"nofollow\">Project Valhalla</a>.</p>","contentLength":13019,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1j9fzru/whats_new_in_java_24/"},{"title":"Deaf in Cloud Native Meet Up","url":"https://www.youtube.com/watch?v=BucO0shTeYM","date":1741769750,"author":"CNCF [Cloud Native Computing Foundation]","guid":524,"unread":true,"content":"<article>Don't miss out! Join us at our next Flagship Conference: KubeCon + CloudNativeCon Europe in London from April 1 - 4, 2025. Connect with our current graduated, incubating, and sandbox projects as the community gathers to further the education and advancement of cloud native computing. Learn more at https://kubecon.io</article>","contentLength":317,"flags":null,"enclosureUrl":"https://www.youtube.com/v/BucO0shTeYM?version=3","enclosureMime":"","commentsUrl":null},{"title":"I stopped everything and started writing C again","url":"https://www.kmx.io/blog/why-stopped-everything-and-started-writing-C-again","date":1741765115,"author":"dvrj101","guid":215,"unread":true,"content":"<p>I've been a good student for 5 years at a French computer school. I've been a good freelance developer for 20 years. I've used Ruby on Rails exclusively however never writing my own code always for clients.</p><p>One day I learned Common Lisp. It was supposed to be a short mission I thought I could learn Common Lisp in ten days and hack a quick server management protocol. I ended up writing throw-away Common Lisp code that generated C for a fully-fledged ASN.1 parser and query system for a custom Common Lisp to C SNMP server.</p><p>Years later I wrote more and more Common Lisp code and ended up writing cl-unix-cybernetics which has the most stars on Github of all my repos there, and cl-streams and cl-cffi, and finally cl-facts which is a triple store that can be used as a Common Lisp graph database. The results were astonishing : very fast, atomic transactions, nestable transactions, compatible with unwind-protect, only 3 macros to learn and you're all set. Cl-facts was presented as a lightning talk at ELS (European Lisp Symposium) in Belgium. Slides for my talk there are available here : <a href=\"https://git.kmx.io/facts-db/cl-facts/_tree/master/doc/facts.pdf\">https://git.kmx.io/facts-db/cl-facts/_tree/master/doc/facts.pdf</a>.</p><p>Writing all these Common Lisp packages took a long time and I was loosing all my clients. I did not care, Common Lisp was awesome and a tool for future generations for sure.</p><p>However I also had a lot of echoes around me of people failing where Theo de Raadt and others had said they were wrong. Virtual machines still suck a lot of CPU and bandwidth for nothing but emulation. Containers in Linux with cgroups are still full of RCE (remote command execution) and priviledge escalation. New ones are discovered each year. The first report I got on those listed 10 or more RCE + PE (remote root on the machine). Remote root can also escape VMs probably also. You do have backups right ? So it kept me centered on OpenBSD and avoided me the hell that most DevOps faced : Terraform, Ansible and such. So I saw people angry with VMs and containers and also people angry with their very programming language. Like Clojure : who can write a strategy game with thousands of units each having their own vision of the world, without having a garbage collector running like hell ? In fact my friend went away and tried to write the game and failed. Garbage collectors suck, and all my Common Lisp projects have very limited applications just because of the garbage collector. And we all know it's a commercial argument to the jVM : it has one of the best GCs around and it did cost a lot to write correctly. I guess it was not written in a one time scratch</p><p>So I thought OK I have a killer app but no-one will run it because it's in Common Lisp. The only rational solution for performance and portability reasons, unless another tool is developed for these specific purpose like C, is C. Linux is written in C, OpenBSD is written in C, GTK+ is object-oriented pure C, GNOME is written in C. Most of the Linux desktop apps are actually written in plain old C. So why try harder ? I know C.</p><p>So I started writing my  utility library, which would become a language () with an interpreter () but could also be compiled () if we did manage to get it through at some point; and data structures emerged from UTF-8 buffers and the other way around pretty fast and all was bounds-checked at memory cost but the results were awesome. Defensive programming all the way : all bugs are reduced to zero right from the start. The system has been maintained clean of wrong bugs all of the time. There are no security implications of running KC3 code. So very fast a small interpreter was born, pumping  (an enum-tagged union of all datatypes of the language) in a REPL (read eval print loop).</p><p>3 years later I just finished a 5 layered refactor and all the tests pass again and the webserver seems to not be broken again. The language was renamed from C3 to KC3 as the original name was already taken. So what do we have ?</p><p>I had already ported the graph database () to C89 and though a couple of bugs remained at the time of import pretty much all the database was written during the Covid-19 lockdown in 2020. Everything was there : add a triple, remove a triple, the recursive query system, transactions, logging and persistence. Pixel perfect implementation of my original design in Common Lisp but in plain old C89 which I remembered quite well.</p><p>Besides the graph data base I also wrote parsers and generators to get formal semantics for all algorithmic types I know of and could write in such a short amount of time : Structs, Linked lists, Maps, Hash tables, Time, Complex, Rationals, Tuples, Code blocks, Quotes, Unquotes, Copy on write, Skip lists, Sets, etc. I have macros like I explain in my other article. I'll do a follow up with some examples of macros. I was very much inspired by the awesome work of José Valim and Elixir. See Fly.io's blog if you want to read José Valim !</p><p>I have a REPL () which parses keyboard or file input and outputs all results of a KC3 evaluation to the console (standard output). It is used for most of the second phase of unit testing KC3.</p><p>I have a webserver with an MVC framework which is producing the very webpage you're reading : .</p><p>I have 700 views on a Common Lisp article which is crazy I did not think Common Lisp had so many followers.</p><p>I have a documentation website all written using  and a vamped Markdown to HTML C implementation.</p><p>Come on Discord and join the fun.</p>","contentLength":5433,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43340731"},{"title":"What are the common uses of Rust?","url":"https://www.reddit.com/r/rust/comments/1j9elp0/what_are_the_common_uses_of_rust/","date":1741764847,"author":"/u/Viper2000_","guid":356,"unread":true,"content":"<p>I have been toying around with Rust lately after hearing universal praise about the language and it's rapid growth. And I want to know, right now and at this stage, what are the most common uses of Rust and in which fields? Where does it really shine and there is demand for it?</p>","contentLength":278,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"ICYMI - Kubescape is now in incubation in the CNCF","url":"https://kubescape.io/blog/2025/02/25/kubescape-incubation/","date":1741764139,"author":"/u/oshratn","guid":340,"unread":true,"content":"<p>We are thrilled to share that Kubescape has officially been accepted as a CNCF Incubating project. This milestone is a significant achievement for the project. Kubescape began in 2021 as a fun project to scan for compliance with NSA-CISA Kubernetes hardening guidelines. What started as a security scanner, helping Devlopers and DevOps teams implement better Kubernetes security practices, evolved into a full security platform. Still helping security Kubernetes environments 😉</p><p>From the very beginning, Kubescape was built with the cloud-native community in mind. It started as a simple CLI tool designed to check cluster configurations against NSA-CISA Kubernetes Hardening Guidance. Over time, with the support of a rapidly growing community, Kubescape has evolved into one of the most complete open-source solutions for Kubernetes security. We are proud to have contributed to its development alongside contributors in the Kubescape community, and to see so many adopters leveraging Kubescape in their day-to-day workflows.</p><p>The Kubescape community has been a driving force behind this success. It’s not just the maintainers and contributors that we celebrate but the many users who have adopted and integrated Kubescape into their environments. Companies like Intel, AWS, Bitnami, ARMO, and Energi Danmark are just a few of the organizations using Kubescape. Some use Kubescape to secure their Kubernetes clusters. Others leverage it for educational purposes. Other use cases that go beyond what we imagined when we made our first commit. We are grateful for the trust that these adopters, along with hundreds of others, have shown in Kubescape.</p><p>As we look toward the future, the Kubescape project is poised for even greater growth. Our roadmap is not just about adding more features, but about continuing to improve usability and optimizing the performance of the platform. We are excited to welcome new contributors and users into the fold as we continue on the hamster-wheel of Kubernetes security.</p><p>The Kubescape community is our foundation, and we are committed to fostering a collaborative and inclusive environment where all contributions are valued. With the incredible support of the Cloud Native Computing Foundation (CNCF) and the broader Kubernetes community, we are determined to demonstrate sustained growth, strong governance, and broad adoption on our journey toward CNCF graduation. We believe that this is just the beginning, and we are eager to see where the future takes us.</p><p>Together, with the support of these vibrant communities, Kubescape will continue to evolve and grow, offering better security, deeper insights, and an ever-expanding set of features. We invite everyone - whether you are an adopter, contributor, or newcomer - to join us in shaping the future of Kubernetes security.</p><p>We welcome your feedback and ideas for improvement. We hold <a href=\"https://kubescape.io/project/community/#monthly-meeting\">community meetings</a> on Zoom, on the first Tuesday of every month, at 14:00 GMT.</p><p>Thanks to all our contributors! Check out our <a href=\"https://github.com/kubescape/project-governance/blob/main/CONTRIBUTING.md\">CONTRIBUTING</a> file to learn how to join them.</p>","contentLength":3040,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/kubernetes/comments/1j9edte/icymi_kubescape_is_now_in_incubation_in_the_cncf/"},{"title":"Azure's Weakest Link? How API Connections Spill Secrets","url":"https://binarysecurity.no/posts/2025/03/api-connections","date":1741761787,"author":"hland","guid":214,"unread":true,"content":"<p>Binary Security found the undocumented APIs for Azure API Connections. In this post we examine the inner workings of the Connections allowing us to escalate privileges and read secrets in backend resources for services ranging from Key Vaults, Storage Blobs, Defender ATP, to Enterprise Jira and SalesForce servers.\n</p><p>During a client engagement, I was checking out their Azure Resources looking for common vulnerabilities. They were utilizing a Logic App to post some messages to Slack. Usually, we can find some tokens or other sensitive information in the workflow run history of these apps, as it is common to not mark input (and output) as sensitive. I could not find anything of the sort in this case, so I moved on from the investigation. However, by chance I saw an odd response from a request automatically made from the portal when going into the API Connection resource. It was something like:</p><div><div><pre><code>\n\n\nHTTP/2 200 OK\nContent-Length: 1893\nContent-Type: application/json; charset=utf-8\n\n\n{\n    \"kind\": \"V2\",\n    \"properties\": {\n        \"displayName\": \"Slack\",\n        \"authenticatedUser\": {},\n        \"overallStatus\": \"Connected\",\n        \"statuses\":[\n            {\n                \"status\":\"Connected\"\n            }\n        ],\n        \"connectionState\": \"Enabled\",\n        \"parameterValueSet\":{\n            \"name\":\"oauth\",\n            \"values\":{}\n        },\n        \"customParameterValues\": {},\n        \"createdTime\": \"2025-01-24T11:46:25.0499291Z\",\n        \"changedTime\": \"2025-01-24T11:46:25.0499291Z\",\n        \"api\": {\n            \"name\": \"slack\",\n            \"displayName\": \"Slack\",\n            \"description\": \"Slack is a team communication tool, that brings together all of your team communications in one place, instantly searchable and available wherever you go.\",\n            \"iconUri\": \"https://conn-afd-prod-endpoint-bmc9bqahasf3grgk.b01.azurefd.net/u/v-anadhar/UpdateSlackForPlugin/1.0.1715.3917/slack/icon.png\",\n            \"brandColor\": \"#78D4B6\",\n            \"category\": \"Standard\",\n            \"id\": \"/subscriptions/8e3ce52f-d45b-4347-8705-65892507465e/providers/Microsoft.Web/locations/norwayeast/managedApis/slack\",\n            \"type\": \"Microsoft.Web/locations/managedApis\"\n        },\n        \"testLinks\": [\n            {\n                \"requestUri\": \"https://management.azure.com:443/subscriptions/8e3ce52f-d45b-4347-8705-65892507465e/resourceGroups/Logic-app-tests/providers/Microsoft.Web/connections/slack/extensions/proxy/conversations.list?api-version=2018-07-01-preview\",\n                \"method\": \"get\"\n            }\n        ],\n        \"testRequests\": [\n            {\n                \"body\": {\n                    \"request\": {\n                        \"method\": \"get\",\n                        \"path\": \"conversations.list\"\n                    }\n                },\n                \"requestUri\": \"https://management.azure.com:443/subscriptions/8e3ce52f-d45b-4347-8705-65892507465e/resourceGroups/Logic-app-tests/providers/Microsoft.Web/connections/slack/dynamicInvoke?api-version=2018-07-01-preview\",\n                \"method\": \"POST\"\n            }\n        ],\n        \"connectionRuntimeUrl\": \"https://d84b73b612cf5960.16.common.logic-norwayeast.azure-apihub.net/apim/slack/4355f64966c34c0cbfc15d48ec41e0c3\"\n    },\n    \"id\": \"/subscriptions/8e3ce52f-d45b-4347-8705-65892507465e/resourceGroups/Logic-app-tests/providers/Microsoft.Web/connections/slack\",\n    \"name\": \"slack\",\n    \"type\": \"Microsoft.Web/connections\",\n    \"location\": \"norwayeast\"\n}\n\n</code></pre></div></div><p>Now, this might seem uninteresting at first glance, but there are two key fields in this response that really opened up a whole slew of possibilities.</p><h2>The Inherent Insecurity of API Connections</h2><p>Consider the  and  fields of the above response. It seems that they provide a sort of proxy between the Azure Management API and the actual backend server, most clearly seen by the  path. We can also see that the connection perhaps is authenticated in some way, by the  value in the . Now, naively, I would think that this means that some user, probably whoever set this up, is authenticated to this connection, and we would need his token to call through the connection, or maybe do an  dance ourselves.</p><p>What I would  expect is that anyone with Reader permissions on the connection is allowed to arbitrarily call any endpoint on the connection:</p><div><div><pre><code>\n\n\nHTTP/2 200 OK\nContent-Type: application/json\nContent-Length: 18329\n\n\"ok\": true,\n\"channels\": [\n    {\n        \"id\": \"C08B8RB5D39\",\n        \"name\": \"social\",\n        \"is_channel\": true,\n        \"is_group\": false,\n        \"is_im\": false,\n        \"is_mpim\": false,\n        \"is_private\": false,\n        \"created\": 1738674777,\n        \"is_archived\": false,\n        \"is_general\": false,\n        \"unlinked\": 0,\n        \"name_normalized\": \"social\",\n        \"is_shared\": false,\n        \"is_org_shared\": false,\n        \"is_pending_ext_shared\": false,\n        \"pending_shared\": [],\n        \"context_team_id\": \"T08BPBEC890\",\n        \"updated\": 1738674779593,\n        \"parent_conversation\": null,\n        \"creator\": \"U08C22K3HPT\",\n        \"is_ext_shared\": false,\n        \"shared_team_ids\": [\n            \"T08BPBEC890\"\n        ],\n        \"pending_connected_team_ids\": [],\n        \"is_member\": true,\n&lt;...&gt;\n\n</code></pre></div></div><p>The response is actually exactly the same as a direct query on the Slack API endpoint <a href=\"https://api.slack.com/methods/conversations.list\">conversations.list</a></p><p>While the Slack case is perhaps not the most security critical, this result begs the question: Does this work for all the other types of APIs exposed through this interface?</p><p>The answer is yes. If you have created an API Connection to any backend server, this includes other Azure resources, all Readers on that subscription can call all  requests defined on the connection. Specifically, this includes Key Vaults, SQL Databases, Jira-servers, Defender ATP, etc.</p><h2>Azure Management (ARM) API’s Security Model</h2><p>Before I show how to exploit this properly, some background on the Azure Management API is required. While we cannot know for sure how the developers at Microsoft designed the system, it seems clear to me that initially, the security model of the management API considered that Readers should be allowed to perform  requests. You would have to be  or higher to perform any changes, i.e. using any of the , , , etc methods.</p><p>This can be seen by for instance requiring a number of sensitive endpoints for  to be empty  requests, like <a href=\"https://learn.microsoft.com/en-us/rest/api/appservice/web-apps/list-host-keys\">List Host Keys</a>.</p><p>At Binary Security we have reported a number of vulnerabilities relating to the leaking of sensitive information through insecure  endpoints. The result of this is that the security model has been somewhat changed in recent times, and it is now not obvious if a Reader is allowed to call a  endpoint. This is, however, still a viable attack method, and reading the documentation is still a goldmine for exploitable bugs.</p><p>Getting back to the API Connections, it should be clear that the Management’s <code>/extensions/proxy/{action}</code> endpoints will allow all Readers to call the defined  requests. And while this is not seen as a problem in the ARM world, there is of course no guarantee that the connected API adheres to this security model.</p><h2>Creating an API Connection</h2><p>API Connections are resources in the Azure world, just like Key Vaults, SQL Databases or VMs, but they are not required to be explicitly created. They are automatically created for you when setting up Actions in a Logic App, so even if you have never heard of them before, it is quite possible that there are a lot of them hanging out in your tenant. For instance, creating a connection to your Key Vault is as easy as going to the Logic App Designer view, finding the Key Vaults actions, setting some initial values and authenticating.\n<img src=\"https://binarysecurity.no/assets/images/posts/createkeyvault-connection.png\" alt=\"Sign in to create the connection\"></p><p>This of course requires that the person setting it up, and authenticating to the Key Vault has appropriate access to the Key Vault. After signing in, it is not required to even save the Workflow, the resource is still created, and will need to be explicitly deleted if it is not needed any more.</p><p>The flows for internal Azure Resources are all similar, where you can choose between different authentication types. For external resources, the setup varies, but in all cases, some authentication information is saved within the API Connection in some way, and this is used when querying the API.</p><p>This means that the authentication used on the backend API call is always the same, and does not depend on the user or principal calling the ARM API. Crucially, the backend cannot know whether the call comes from the Logic App or from the proxy endpoint, called by any Reader on the resource.</p><p>The full list of API Connections (Connectors) can be seen <a href=\"https://learn.microsoft.com/en-us/connectors/connector-reference/\">here</a>. The proxy endpoints are not explicitly listed, but they can either be deduced from the API of the connected service, or by querying the  endpoint for that specific Connector, which exposes a Swagger definition of the API. Here we query it for the definition of the Jira Connector:</p><div><div><pre><code>\n\nHTTP/2 200 OK\n&lt;...&gt;\n\n{\n    \"/{connectionId}/3/issue/{issueIdOrKey}\": {\n        \"put\": {\n            \"description\": \"Edits an issue. A transition may be applied and issue properties updated as part of the edit. The edits to the issue's fields are defined using update and fields.\",\n            \"summary\": \"Edit Issue\",\n            \"tags\": [\n                \"Issues\"\n            ],\n            \"operationId\": \"EditIssue\",\n            \"deprecated\": false,\n            \"produces\": [\n                \"application/json\"\n            ],\n            \"consumes\": [\n                \"application/json\"\n            ],\n            \"parameters\": [\n                {\n                    \"name\": \"connectionId\",\n                    \"in\": \"path\",\n                    \"required\": true,\n                    \"type\": \"string\",\n                    \"x-ms-visibility\": \"internal\"\n                },\n                {\n                    \"name\": \"issueIdOrKey\",\n                    \"in\": \"path\",\n                    \"required\": true,\n                    \"type\": \"string\",\n                    \"x-ms-summary\": \"Issue ID or Key\",\n                    \"description\": \"Provide the Issue ID or Key for the issue you wish to edit\",\n                    \"x-ms-url-encoding\": \"single\"\n                },\n&lt;...&gt;\n\n</code></pre></div></div><p>The  in this case is the full path to the  endpoint, something like <code>/subscription/[SUBSCRIPTION_ID]/resourceGroups/[RESOURCE_GROUP]/providers/Microsoft.Web/connections/[CONNECTION_NAME]/extensions/proxy/</code>.</p><p>Armed with this knowledge, we can go searching for sensitive endpoints.</p><p>The Connector for Key Vaults is maybe the one with the highest impact. The Swagger definition includes these sensitive  endpoints</p><ul><li> for listing secrets</li><li><code>/{connectionId}/secrets/{secretName}/value</code> to retrieve the value of the secret</li></ul><p>The SQL Connector is quite similar to the Key Vault, you are basically free to read whatever you want:</p><ul><li><p><code>/{connectionId}/databases</code> -  List Databases</p></li><li><p> - List Datasets</p></li><li><p><code>/{connectionId}/datasets({dataset})/tables({table})/items</code> - Get rows from a table</p></li></ul><p>There is also a hilarious error message here, when trying to do some path traversing in the dataset name. It did not seem to be exploitable in any way, but I bet you have never seen a stacktrace exposed in an HTTP status message:</p><p>The Jira Connector also exposes effectively everything on your Jira instance:</p><ul><li><p><code>/{connectionId}/v2/project/search</code> - List projects</p></li><li><p><code>/{connectionId}/user/permission/search</code> - List users</p></li><li><p> - List issues</p></li><li><p><code>/{connectionId}/issue/{issueKey}</code> - Read an issue</p></li></ul><p>This connector is also interesting because it, of course, must be connected to your Jira instance somewhere else on the Internet. When setting up the connection, the developer gives the connection the URL of the Jira Instance. Incredibly, this is ignored in all subsequent requests, and instead, a special  header must be included in the request. This should point to your Jira instance, but there is no verification, so an attacker is free to SSRF at will. By setting this to an attacker-controlled server, the attacker will receive the API token used by the connection. This effectively also bypasses the restriction on the requests, and allows the attacker to query any endpoint with any method.</p><p>Note that this attack is only possible when using the  authentication mechanism. When using , a GUID is used to identify your Jira Instance.</p><p>All API Connections must be considered insecure as long as Readers can call the backend server. In nearly all cases I have seen, the connection exposes all information on the backend service. In addition to the ones above, this includes:</p><ul><li>Google Mail, Contacts, Calendars</li></ul><p>I think there is significant undiscovered potential in these connections. Without going into detail, I can tell you that API Connections have a significant amount of architecture hidden between the Management Server and the backend API. All calls go from ARM to a  APIM instance containing every tenant’s API Connection, utilizing a <a href=\"https://github.com/Azure/azure-tokens\">Token Store</a>. The initial authentication setup likewise goes through a  Consent server for storing tokens. If this hidden infrastructure is compromised, there will be significant cross-tenant impact as well.</p><p>Hopefully by now, you have realized the impact of a lacking security model. While these endpoints are undocumented, that only makes them harder to find, not exploit. I am confident that any security researcher who had found them would immediately have noticed the glaring security hole it puts in their tenant. Hopefully, this post will allow others to discover more insecurities in Azure, so that we can be more secure in the future.</p><ul><li>Jan 6: Report submitted to Microsoft, both a general for API Connections and one specifically for Jira.</li><li>Jan 7: API Connection case is closed by Microsoft as not valid, I submit it again with more words.</li><li>Jan 10: Microsoft confirms the API Connection vulnerability</li><li>Jan 12-17: Microsoft fixes the API Connection vulnerability by not allowing any requests through  except for .</li><li>Jan 30: Microsoft replies on the Jira ticket, saying they cannot reproduce it, which should be obvious, since now it is fixed.</li><li>Feb 12: Jira Ticket is closed</li><li>Feb 13: Microsoft replies to the API Connection case, saying it has been fixed.</li><li>Feb 20: The case is closed as a duplicate.</li></ul>","contentLength":14090,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43340505"},{"title":"Gemma 3 Technical Report [pdf]","url":"https://storage.googleapis.com/deepmind-media/gemma/Gemma3Report.pdf","date":1741761557,"author":"meetpateltech","guid":213,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43340491"},{"title":"The Insecurity of Telecom Stacks in the Wake of Salt Typhoon","url":"https://soatok.blog/2025/03/12/on-the-insecurity-of-telecom-stacks-in-the-wake-of-salt-typhoon/","date":1741756893,"author":"zdw","guid":212,"unread":true,"content":"<p>This isn’t really a blog post about that incident, but it was the catalyst that inspired a bit of curiosity within me.</p><p>I can’t (legally) access most mobile phone companies’ networks to see what vulnerabilities I can find, but there are plenty of open source software projects related to telecommunications on GitHub. So when I heard about the Salt Typhoon hacks, I wondered, “Is any of this open source telecom software any good?”</p><p>In a previous life, I worked with companies that used <a href=\"https://github.com/asterisk/asterisk\" target=\"_blank\" rel=\"noreferrer noopener\">Asterisk</a> and <a href=\"https://github.com/signalwire/freeswitch\" target=\"_blank\" rel=\"noreferrer noopener\">FreeSWITCH</a>, but I’d never really looked into them beyond the surface-level familiarity congruent to “this uses a similar protocol as RedPhone, somewhere” (this was when <a href=\"https://soatok.blog/2025/02/18/reviewing-the-cryptography-used-by-signal/\" target=\"_blank\" rel=\"noreferrer noopener\">Signal</a> was still called TextSecure).</p><p>I don’t know much about PBX systems, SIP, or even audio encoding. Furthermore, some of the best C programmers I’ve ever met worked in telecom. Hell, some of the longest-running hacker communities have their roots in phone phreaking from the 1980s. Not to mention all the legendary engineers that trace their roots to Bell Labs.</p><p>This is all to say, I thought looking at this sort of software would be a fruitless endeavor. </p><p><em>Surely all of the low-hanging fruit would be found already?</em></p><p>Thus, I opened FreeSWITCH’s source code on GitHub and almost immediately found a vulnerability.</p><h2>Buffer Overflow in HTTP Request Handler for XMLRPC</h2><p>In <a href=\"https://github.com/signalwire/freeswitch/blob/75566bc270f7b4064eb9ff3aed68e2f752fc17ee/libs/xmlrpc-c/lib/abyss/src/handler.c#L243-L250\">this excerpt of code</a>, the HTTP request handler for the XMLRPC library bundled with FreeSWITCH writes an arbitrary-length URI to a 4096-byte stack variable called z.</p><div><pre title=\"\">char z[4096];\nchar *p,z1[26],z2[20],z3[9],u;\nconst char * z4;\nint16_t i;\nuint32_t k;\n\nif (text) {\n    sprintf(z, \"Index of %s\" CRLF, uri);\n</pre></div><p>I think it’s reasonable to assume that attackers are capable of sending a Request URI longer than 4096 characters.</p><p>Putting these observations together, it’s pretty easy to see this is a no-auth buffer overflow in their XMLRPC library. </p><blockquote><p>Turning this into remote code execution is an exercise left to the reader (mostly because I’m not really up-to-date on OS-level exploit mitigation techniques, and how to bypass them).</p></blockquote><p>This is kind of “defensive C programming practices 101” level.</p><h2>Soatok Attempts Coordinated Disclosure</h2><p>(n.b., <a href=\"https://soatok.blog/2025/01/21/too-many-people-dont-value-the-time-of-security-researchers/#:~:text=Responsible%20Disclosure%2C%20Isn%E2%80%99t\" target=\"_blank\" rel=\"noreferrer noopener\">Please stop saying “responsible” disclosure</a>.)</p><p>: I send a follow-up email to ensure they received my report.</p><p>: Andrey Volk responds:</p><p>Since the fixes are now public, I’m left to assume that “embargo has broken,” so to speak. That means I’m free to blog about this publicly.</p><p>However, I notice they haven’t tagged a new release with this security fix for FreeSWITCH users. I reply:</p><blockquote><p>Oh, wonderful. Thanks for getting back to me.</p><p>Do you have an ETA on when the release will be tagged? I don’t want to publish anything until people can easily install an updated version.</p></blockquote><p>A few hours later, Andrey responds to my email.</p><p>Brace yourselves, it’s a stupid one.</p><blockquote><p>Thank you for your interest in FreeSWITCH.</p><p>We do not have plans to make a release&nbsp;of FreeSWITCH Community till summer 2025.</p></blockquote><p>To recap: An employee of SignalWire (which develops FreeSWITCH) came right out and said they would let people who aren’t <a href=\"https://web.archive.org/web/20250226171744/https://signalwire.com/products/freeswitch-enterprise\">paying for FreeSWITCH Advantage</a> stay vulnerable until their regularly scheduled release (sometime in the Summer).</p><p>There are <a href=\"https://web.archive.org/web/20250312042655/https://www.shodan.io/search?query=freeswitch\" target=\"_blank\" rel=\"noreferrer noopener\">about 8,300 hits on Shodan for FreeSWITCH</a> as I write this. I highly doubt they’re all paying for enterprise support, so we’re talking about potentially thousands of telecom stacks around the world that SignalWire has decided to keep vulnerable until the Summer, even after they published the patches on GitHub.</p><p>While such a decision might be perfectly legal, it really does not inspire trust in the stewards of this software project to give a shit about the harm their careless coding practices inflict upon their users.</p><h2>TelecomSec: A Systemic Issue</h2><p>The worst part is, when I confided in a friend that works in telecom (after SignalWire published the fixes, of course) about this carnival-quality vulnerability management from the FreeSWITCH developers, their response was:</p><blockquote><p>December 2024 is the last time that alarms were once again raised about known SS7 vulnerabilities that have continued to exist in telephone networks for the past 17 years.</p></blockquote><p>And, to be honest, that <em>kind of took the wind out of my sails</em> so I didn’t bother looking at Asterisk or any of the other software.</p><p>I mean, why bother? I already had the answer to the question that prompted me to look in the first place: <strong>Telecom security sucks today</strong>.</p><p>The reason things sucks is largely because there’s very little (if any) money to be made in securing these systems today.</p><p>Things don’t  be this way, of course.</p><p>Maybe there’s some opportunity for some enterprising young hacker to write a FreeSWITCH competitor in Rust that has sane vulnerability management around it.</p><p>Maybe in the future, we’ll find the political will to invest in the security of America’s telecommunications infrastructure. Who knows, some of that money might even percolate towards open source software, and they can hire someone who knows how to run valgrind.</p><p>Or maybe everything will continue to suck, because incentives rule anything, and there currently aren’t any to do better.</p><p>It took me a long time to write this one up, despite it being a rather simple technical issue, because I’m sure there are eldritch horrors lurking beneath the surface of this relatively simple finding.</p><p>The vendor’s response was pretty lame, yeah. But is this vendor the lamest in their industry? I’m not so sure about that one. At least they responded within 90 days and fixed the issue on their GitHub.</p><p>But, hey, if you’re waiting on SignalWire to get around to running … maybe rebuild from source or block public HTTP access to your FreeSWITCH stack at the firewall level?</p>","contentLength":5718,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43340196"},{"title":"Why Go for TypeScript compiler?","url":"https://github.com/microsoft/typescript-go/discussions/411","date":1741755589,"author":"/u/RobertVandenberg","guid":354,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1j9bm1e/why_go_for_typescript_compiler/"},{"title":"Go module is just too well designed","url":"https://www.reddit.com/r/golang/comments/1j9aii3/go_module_is_just_too_well_designed/","date":1741752013,"author":"/u/greengoguma","guid":336,"unread":true,"content":"<ol><li>Ability to pull directly from Git removes the need for repository manager.</li><li>Requiring major version in the module name after v1 allows a project to import multiple major versions at the same time.</li><li>Dependency management built into the core language removes the need to install additional tools</li><li>No pre-compiled package imports like Jar so my IDE can go to the definition without decompiling.</li></ol><p>These, such simple design choices, made me avoid a lot of pain points I faced while working in another language. No need to install npm, yarn or even wonder what the difference between the two is. No dependencies running into each other.</p><p>I simply do  and it works. Just. Amazing.</p>","contentLength":663,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"OpenAI Pushes AI Agent Capabilities With New Developer API","url":"https://developers.slashdot.org/story/25/03/11/2154229/openai-pushes-ai-agent-capabilities-with-new-developer-api?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1741750200,"author":"BeauHD","guid":256,"unread":true,"content":"An anonymous reader quotes a report from Ars Technica: On Tuesday, OpenAI unveiled a new \"Responses API\" designed to help software developers create AI agents that can perform tasks independently using the company's AI models. The Responses API will eventually replace the current Assistants API, which OpenAI plans to retire in the first half of 2026. With the new offering, users can develop custom AI agents that scan company files with a file search utility that rapidly checks company databases (with OpenAI promising not to train its models on these files) and navigate websites -- similar to functions available through OpenAI's Operator agent, whose underlying Computer-Using Agent (CUA) model developers can also access to enable automation of tasks like data entry and other operations.\n \nHowever, OpenAI acknowledges that its CUA model is not yet reliable for automating tasks on operating systems and can make unintended mistakes. The company describes the new API as an early iteration that it will continue to improve over time. Developers using the Responses API can access the same models that power ChatGPT Search: GPT-4o search and GPT-4o mini search. These models can browse the web to answer questions and cite sources in their responses. That's notable because OpenAI says the added web search ability dramatically improves the factual accuracy of its AI models. On OpenAI's SimpleQA benchmark, which aims to measure confabulation rate, GPT-4o search scored 90 percent, while GPT-4o mini search achieved 88 percent -- both substantially outperforming the larger GPT-4.5 model without search, which scored 63 percent.\n \nDespite these improvements, the technology still has significant limitations. Aside from issues with CUA properly navigating websites, the improved search capability doesn't completely solve the problem of AI confabulations, with GPT-4o search still making factual mistakes 10 percent of the time. Alongside the Responses API, OpenAI released the open source Agents SDK, providing developers free tools to integrate models with internal systems, implement safeguards, and monitor agent activities. This toolkit follows OpenAI's earlier release of Swarm, a framework for orchestrating multiple agents.","contentLength":2240,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"I'm frustrated, but positive about the future - my experience with Linux","url":"https://www.reddit.com/r/linux/comments/1j99ybp/im_frustrated_but_positive_about_the_future_my/","date":1741750093,"author":"/u/Helios5584","guid":343,"unread":true,"content":"<p>I recently decided to take a deep dive into Linux and its many distro's. Due to the rapid degrading of the Windows experience; I wanted something clean, free of bloat, and most importantly, able to run my video games without hassle.</p><p>I spent many minutes researching and deciding which distro to go with and landed on Nobara. It was love a first site. The interface was kinda like Windows, the default package manager was simple, and the system felt quick and snappy. </p><p>I had previously tried Linux 5-8 years ago, and my experience back then was pretty negative. Some of my devices were not properly working (due to Pulse Audio) and I could not get them to work. Believe me, I really tried to get into it and fix the issues. With Nobara, everything worked right out of the gate and worked well.</p><p>I was super hyped with this and was loving Linux. Then came the games.</p><p>I had recently been playing Kingdom Come Deliverance 2 on Windows and that was the first game I tried installing. I grabbed the latest GE version of proton from Proton Plus, enabled the settings in Steam, and went about downloading the game. It launched great and framerates were smooth. However, upon loading into my save, I started getting firefly artifacting (tiny white boxes randomly appearing and disappearing in the game. I scoured forums, downgraded Mesa drivers, change cpupower governor's, and even went as far as flashing my BIO's. Nothing worked. According to forums, this is likely due to my AMD GPU (7900xtx) interacting with Linux (My card is not bad as it worked great in Windows).</p><p>Fed up with all the troubleshooting, I decided to try other distro's thinking it might have been Nobara causing the issues. I went to Bazzite: same issue. I went to Ubuntu: same issue. I even built my own Arch install: same issue (this step took a while to build and figure out).</p><p>I came to the conclusion that it must be something with the drivers. At this point, it felt like Windows was calling out to me, asking me to come back to it. The main reason for my computers existence is to play video games and play them well. If it cannot do that in Linux currently, then I feel like I am almost being forced back to Windows. This is post is not throwing shade at the driver developers for Linux or at the amount of work people put into making Linux better, massive kudo's to all of you. However, it just does not feel like an out of the box experience yet where my games just \"work\".</p><p>I plan on trying Linux again in the future. I really enjoyed by time with both Nobara and Bazzite, and I wish to use them full time in the future if the drivers (or whatever was causing the issues) allow. I love open source and everything it stands for. Linux developers: I hope you will keep on putting the effort into making Linux a great place to be, I truly look forward to the Linux future.</p><p>Thanks for coming to my Ted Talk.</p>","contentLength":2866,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Show HN: XPipe, a shell connection hub for SSH, Docker, K8s, VMs, and more","url":"https://xpipe.io/","date":1741749388,"author":"crschnick","guid":208,"unread":true,"content":"<li><div>A connection hub to keep track and manage of all your remote connections in one place</div></li><li><div>A terminal launcher that can launch you into a shell session in your favorite terminal instantly</div></li><li><div>Complete SSH support, including config files, agent integrations, jump servers, tunnels, key files, smartcards, X11 forwarding, and more</div></li><li><div>Integrations for various container runtimes like Docker, Podman, Kubernetes, LXD, incus, plus environments like WSL, Cygwin, MSYS2</div></li><li><div>Support for hypervisors like Proxmox, Hyper-V, KVM, VMware workstation, and more</div></li>","contentLength":527,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43339629"},{"title":"Show HN: VSC – An open source 3D Rendering Engine in C++","url":"https://github.com/WW92030-STORAGE/VSC","date":1741748903,"author":"NormalExisting","guid":207,"unread":true,"content":"<p>Been making this rasterizer engine in C++ for the past few months, now also adding ray-tracing functionality to the system.</p><p>Simply load a model or generate a mesh, add some lights, and render.</p>","contentLength":191,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43339584"},{"title":"Beyond Diffusion: Inductive Moment Matching","url":"https://lumalabs.ai/news/inductive-moment-matching","date":1741748747,"author":"outrun86","guid":211,"unread":true,"content":"<h3>Fully unlocking the potential of rich multi-modal data</h3><div><p>There is a growing sentiment in the AI community that generative pre-training is reaching a limit. However, we argue that these limits are not due to a lack of data itself, but rather a stagnation in algorithmic innovation. The field remains dominated by just two paradigms since around mid-2020: autoregressive models for discrete signals and diffusion models for continuous signals. This stagnation has created a bottleneck that prevents us from fully unlocking the potential of rich multi-modal data, which in turn limits the progress on multimodal intelligence.</p><p>At Luma, we aim to overcome this algorithmic ceiling through the lens of efficient inference-time compute scaling. Today we are introducing a new method, Inductive Moment Matching (IMM), a pre-training technique that not only delivers superior sample quality compared to diffusion models but also offers over a tenfold increase in sampling efficiency. In contrast to consistency models (CMs), which are unstable as a pre-training technique and require special hyperparameter designs, IMM employs a single objective with enhanced stability across diverse settings.</p></div><h3>How Inductive Moment Matching Works</h3><div><p>Inference can generally be scaled along two dimensions: extending sequence length (in autoregressive models), and augmenting the number of refinement steps (in diffusion models). While adding more refinement steps significantly boosts diffusion models, simply increasing the model capacity does not yield proportional improvements. This is because diffusion models inherently require more granular steps to converge to an optimal solution, regardless of the networks’ representational power. This shows that, from an inference-time perspective, diffusion models are not optimal in utilizing the networks’ capacity.</p></div><div><p>We illustrate these limitations from an inference perspective by examining the DDIM sampler for diffusion models. In each DDIM iteration, the network first generates a prediction using the current input and timestep, then linearly interpolates this prediction toward that of the next timestep. This constrains the expressive capacity of each iteration as it is linear with respect to the next timestep, ultimately capping performance regardless of the training method employed (see figure below).</p></div><div><p>We design our new pre-training algorithm by first aiming to mitigate this inference limitation. Our new method, Inductive Moment Matching (IMM), introduces a subtle yet powerful modification: alongside the current timestep, the network also processes the target timestep to jump towards. This change enhances the flexibility of each inference iteration, paving the way for state-of-the-art performance and efficiency. We realize this improvement by incorporating maximum mean discrepancy — a robust moment matching technique that was developed more than 15 years ago.</p></div><div><p>We test IMM on various hyperparameters and model architectures. On ImageNet 256x256, IMM achieves 1.99 Frechet Inception Distance (FID) and surpasses diffusion models (2.27 FID) and Flow Matching (2.15 FID) with 30x fewer sampling steps. It similarly achieves state-of-the-art 2-step FID of 1.98 on the standard CIFAR-10 dataset for a model trained from scratch.</p></div><div><p>IMM scales with training and inference compute as well as model size. We show in the figure below FID vs. training and inference compute, and we find strong correlation between compute used and performance.</p></div><div><p>Unlike consistency models, which have been shown to have unstable training dynamics, IMM is stable to train across various hyperparameters and architectures.</p></div><div><p>Notably, IMM does not rely on denoising score matching or the score-based stochastic differential equations on which the foundations of diffusion models are built. The key driver of our performance gains is not only moment matching itself, but also our shift towards an inference-first perspective. This not only reveals the inherent limitations in current pre-training paradigms but also empowers us to develop innovative algorithms designed to break through the current limits of pre-training.</p><p>We believe that this is just the beginning of a paradigm shift towards multi-modal foundation models that transcends current boundaries and fully unlock creative intelligence.</p><p>If you are interested in the mission, <a href=\"https://lumalabs.ai/join\">join us</a>.</p></div><div><p>Linqi Zhou, Stefano Ermon, Jiaming Song. “Inductive Moment Matching”.Jiaming Song, Linqi Zhou. “Ideas in Inference-time Scaling can Benefit Generative Pre-training Algorithms”.<p>Song et al. “Denoising Diffusion Implicit Models.”&nbsp;ICLR 2021.</p>Song et al. “Consistency Models.”&nbsp;ICML 2023.<p>Lipman et al. “Flow matching for generative modeling.”&nbsp;ICLR 2023.</p>Gretton et al. “A Kernel Method for the Two-Sample Problem.” NeurIPS 2006.<p>Song et al. “Score-Based Generative Modeling through Stochastic Differential Equations.”&nbsp;ICLR 2021.</p>Kim et al. “Consistency Trajectory Models: Learning Probability Flow ODE Trajectory of Diffusion.”&nbsp;ICLR 2024.<p>Vincent. “A Connection Between Score Matching and Denoising Autoencoders.”&nbsp;Neural Computation (Vol. 23).</p>Geng et al. “Consistency Models Made Easy”. ICLR 2025.</p></div>","contentLength":5173,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43339563"},{"title":"Why isn’t Go used for game development, even though it performs better than C#?","url":"https://www.reddit.com/r/golang/comments/1j99a3x/why_isnt_go_used_for_game_development_even_though/","date":1741747939,"author":"/u/mohamed_essam_salem","guid":335,"unread":true,"content":"<p>I've been wondering why Go (Golang) isn't commonly used for game development, despite the fact that it generally has better raw performance than C#. Since Go compiles to machine code and has lightweight concurrency (goroutines), it should theoretically be a strong choice.</p><p>Yet, C# (which is JIT-compiled and typically slower in general applications) dominates game development, mainly because of Unity. Is it just because of the lack of engines and libraries, or is there something deeper—like Go’s garbage collection, lack of low-level control, or weaker GPU support—that makes it unsuitable for real-time game development?</p><p>Would love to hear thoughts from developers who have tried using Go for games!</p>","contentLength":707,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"New ARandR alternative for X11 display settings","url":"https://github.com/bossadapt/Display-Settings-Plus","date":1741740732,"author":"/u/bossadapt","guid":344,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/linux/comments/1j96s11/new_arandr_alternative_for_x11_display_settings/"},{"title":"Traversal-resistant file APIs","url":"https://go.dev/blog/osroot","date":1741737600,"author":"Damien Neil","guid":188,"unread":true,"content":"<p>A <em>path traversal vulnerability</em> arises when an attacker can trick a program\ninto opening a file other than the one it intended.\nThis post explains this class of vulnerability,\nsome existing defenses against it, and describes how the new\n<a href=\"https://go.dev/pkg/os#Root\"></a> API added in Go 1.24 provides\na simple and robust defense against unintentional path traversal.</p><p>“Path traversal” covers a number of related attacks following a common pattern:\nA program attempts to open a file in some known location, but an attacker causes\nit to open a file in a different location.</p><p>If the attacker controls part of the filename, they may be able to use relative\ndirectory components (\"..\") to escape the intended location:</p><pre><code>f, err := os.Open(filepath.Join(trustedLocation, \"../../../../etc/passwd\"))\n</code></pre><p>On Windows systems, some names have special meaning:</p><pre><code>// f will print to the console.\nf, err := os.Create(filepath.Join(trustedLocation, \"CONOUT$\"))\n</code></pre><p>If the attacker controls part of the local filesystem, they may be able to use\nsymbolic links to cause a program to access the wrong file:</p><pre><code>// Attacker links /home/user/.config to /home/otheruser/.config:\nerr := os.WriteFile(\"/home/user/.config/foo\", config, 0o666)\n</code></pre><p>If the program defends against symlink traversal by first verifying that the intended file\ndoes not contain any symlinks, it may still be vulnerable to\n<a href=\"https://en.wikipedia.org/wiki/Time-of-check_to_time-of-use\" rel=\"noreferrer\" target=\"_blank\">time-of-check/time-of-use (TOCTOU) races</a>,\nwhere the attacker creates a symlink after the program’s check:</p><pre><code>// Validate the path before use.\ncleaned, err := filepath.EvalSymlinks(unsafePath)\nif err != nil {\n  return err\n}\nif !filepath.IsLocal(cleaned) {\n  return errors.New(\"unsafe path\")\n}\n\n// Attacker replaces part of the path with a symlink.\n// The Open call follows the symlink:\nf, err := os.Open(cleaned)\n</code></pre><p>Another variety of TOCTOU race involves moving a directory that forms part of a path\nmid-traversal. For example, the attacker provides a path such as “a/b/c/../../etc/passwd”,\nand renames “a/b/c” to “a/b” while the open operation is in progress.</p><p>Before we tackle path traversal attacks in general, let’s start with path sanitization.\nWhen a program’s threat model does not include attackers with access to the local file system,\nit can be sufficient to validate untrusted input paths before use.</p><p>Unfortunately, sanitizing paths can be surprisingly tricky,\nespecially for portable programs that must handle both Unix and Windows paths.\nFor example, on Windows  reports ,\nbecause the path “\\foo” is relative to the current drive.</p><p>In Go 1.20, we added the <a href=\"https://go.dev/pkg/path/filepath#IsLocal\"></a>\nfunction, which reports whether a path is “local”. A “local” path is one which:</p><ul><li>does not escape the directory in which it is evaluated (\"../etc/passwd\" is not allowed);</li><li>is not an absolute path (\"/etc/passwd\" is not allowed);</li><li>is not empty (\"\" is not allowed);</li><li>on Windows, is not a reserved name (“COM1” is not allowed).</li></ul><p>In Go 1.23, we added the <a href=\"https://go.dev/pkg/path/filepath#Localize\"></a>\nfunction, which converts a /-separated path into a local operating system path.</p><p>Programs that accept and operate on potentially attacker-controlled paths should almost\nalways use  or  to validate or sanitize those paths.</p><p>Path sanitization is not sufficient when attackers may have access to part of\nthe local filesystem.</p><p>Multi-user systems are uncommon these days, but attacker access to the filesystem\ncan still occur in a variety of ways.\nAn unarchiving utility that extracts a tar or zip file may be induced\nto extract a symbolic link and then extract a file name that traverses that link.\nA container runtime may give untrusted code access to a portion of the local filesystem.</p><p>Programs may defend against unintended symlink traversal by using the\n<a href=\"https://go.dev/pkg/path/filepath#EvalSymlinks\"><code>path/filepath.EvalSymlinks</code></a>\nfunction to resolve links in untrusted names before validation, but as described\nabove this two-step process is vulnerable to TOCTOU races.</p><p>Before Go 1.24, the safer option was to use a package such as\n<a href=\"https://go.dev/pkg/github.com/google/safeopen\">github.com/google/safeopen</a>,\nthat provides path traversal-resistant functions for opening a potentially-untrusted\nfilename within a specific directory.</p><p>In Go 1.24, we are introducing new APIs in the  package to safely open\na file in a location in a traversal-resistent fashion.</p><p>The new <a href=\"https://go.dev/pkg/os#Root\"></a> type represents a directory somewhere\nin the local filesystem. Open a root with the <a href=\"https://go.dev/pkg/os#OpenRoot\"></a>\nfunction:</p><pre><code>root, err := os.OpenRoot(\"/some/root/directory\")\nif err != nil {\n  return err\n}\ndefer root.Close()\n</code></pre><p> provides methods to operate on files within the root.\nThese methods all accept filenames relative to the root,\nand disallow any operations that would escape from the root either\nusing relative path components (\"..\") or symlinks.</p><pre><code>f, err := root.Open(\"path/to/file\")\n</code></pre><p> permits relative path components and symlinks that do not escape the root.\nFor example,  is permitted. Filenames are resolved using the\nsemantics of the local platform: On Unix systems, this will follow\nany symlink in “a” (so long as that link does not escape the root);\nwhile on Windows systems this will open “b” (even if “a” does not exist).</p><p> currently provides the following set of operations:</p><pre><code>func (*Root) Create(string) (*File, error)\nfunc (*Root) Lstat(string) (fs.FileInfo, error)\nfunc (*Root) Mkdir(string, fs.FileMode) error\nfunc (*Root) Open(string) (*File, error)\nfunc (*Root) OpenFile(string, int, fs.FileMode) (*File, error)\nfunc (*Root) OpenRoot(string) (*Root, error)\nfunc (*Root) Remove(string) error\nfunc (*Root) Stat(string) (fs.FileInfo, error)\n</code></pre><p>In addition to the  type, the new\n<a href=\"https://go.dev/pkg/os#OpenInRoot\"></a> function\nprovides a simple way to open a potentially-untrusted filename within a\nspecific directory:</p><pre><code>f, err := os.OpenInRoot(\"/some/root/directory\", untrustedFilename)\n</code></pre><p>The  type provides a simple, safe, portable API for operating with untrusted filenames.</p><h2>Caveats and considerations</h2><p>On Unix systems,  is implemented using the  family of system calls.\nA  contains a file descriptor referencing its root directory and will track that\ndirectory across renames or deletion.</p><p> defends against symlink traversal but does not limit traversal\nof mount points. For example,  does not prevent traversal of\nLinux bind mounts. Our threat model is that  defends against\nfilesystem constructs that may be created by ordinary users (such\nas symlinks), but does not handle ones that require root privileges\nto create (such as bind mounts).</p><p>On Windows,  opens a handle referencing its root directory.\nThe open handle prevents that directory from being renamed or deleted until the  is closed.</p><p> prevents access to reserved Windows device names such as  and .</p><p>On WASI, the  package uses the WASI preview 1 filesystem API,\nwhich are intended to provide traversal-resistent filesystem access.\nNot all WASI implementations fully support filesystem sandboxing,\nhowever, and ’s defense against traversal is limited to that provided\nby the WASI impementation.</p><p>When GOOS=js, the  package uses the Node.js file system API.\nThis API does not include the openat family of functions,\nand so  is vulnerable to TOCTOU (time-of-check-time-of-use) races in symlink\nvalidation on this platform.</p><p>When GOOS=js, a  references a directory name rather than a file descriptor,\nand does not track directories across renames.</p><p>Plan 9 does not have symlinks.\nOn Plan 9, a  references a directory name and performs lexical sanitization of\nfilenames.</p><p> operations on filenames containing many directory components can be much more expensive\nthan the equivalent non- operation. Resolving “..” components can also be expensive.\nPrograms that want to limit the cost of filesystem operations can use  to\nremove “..” components from input filenames, and may want to limit the number of\ndirectory components.</p><p>You should use  or  if:</p><ul><li>you are opening a file in a directory; AND</li><li>the operation should not access a file outside that directory.</li></ul><p>For example, an archive extractor writing files to an output directory should use\n, because the filenames are potentially untrusted and it would be incorrect\nto write a file outside the output directory.</p><p>However, a command-line program that writes output to a user-specified location\nshould not use , because the filename is not untrusted and may\nrefer to anywhere on the filesystem.</p><p>As a good rule of thumb, code which calls  to combine a fixed directory\nand an externally-provided filename should probably use  instead.</p><pre><code>// This might open a file not located in baseDirectory.\nf, err := os.Open(filepath.Join(baseDirectory, filename))\n\n// This will only open files under baseDirectory.\nf, err := os.OpenInRoot(baseDirectory, filename)\n</code></pre><p>The  API is new in Go 1.24.\nWe expect to make additions and refinements to it in future releases.</p><p>The current implementation prioritizes correctness and safety over performance.\nFuture versions will take advantage of platform-specific APIs, such as\nLinux’s , to improve performance where possible.</p><p>There are a number of filesystem operations which  does not support yet, such as\ncreating symbolic links and renaming files. Where possible, we will add support for these\noperations. A list of additional functions in progress is in\n<a href=\"https://go.dev/issue/67002\">go.dev/issue/67002</a>.</p>","contentLength":8941,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Survey Surfaces High DevOps Burnout Rates Despite AI Advances - DevOps.com","url":"https://devops.com/survey-surfaces-high-devops-burnout-rates-despite-ai-advances/","date":1741736466,"author":"/u/Inner-Chemistry8971","guid":352,"unread":true,"content":"<p>A <a href=\"https://jellyfish.co/newsroom/jellyfish-releases-2024-state-of-engineering-management-report/\" target=\"_blank\" rel=\"noopener\">survey</a> of 604 software developers and engineering professionals finds that while 61% work for organizations that are employing artificial intelligence (AI) to build software to some degree nearly two-thirds (65%) still experience burnout. In fact, after maintaining a high-performing team (47%), burnout (41%) is the second most often challenge, survey respondents cited.</p><p>Conducted by Kickstand Research on behalf of Jellyfish, a provider of a platform for managing software engineering teams, the survey finds that among organizations that have adopted AI, a full 94% said it positively influenced their team’s productivity, with 81% reporting AI increases the quality of code.</p><p>A total of 84% also said AI frees up time to focus on high-value activities, the survey finds.</p><p>However, the survey makes it clear there is a disconnect between the managers (48%) and developers/engineers who participated. More than three-quarters of executives (76%) believe their team has embraced AI, while only 52% of the rank-and-file respondents agreed.</p><p>Of the non-AI users, 48% said their team had not adopted the technology due to security concerns, followed by just over a third (34%) citing a lack of expertise. Just under a quarter (24%) said budget constraints had prevented them from using AI. Notably, 19% of executives who work for organizations that have not embraced AI view it as a gimmick.</p><p>Jellyfish CEO Andrew Lau said that while there is a lot of hyperbole being thrown around when it comes to AI, software engineering teams should lean into it. AI agents and copilots are bringing inevitable change to software engineering that will change and impact the role of software engineering, he added.</p><h3>AI Models Will Become More Commonplace</h3><p>Long term, there’s no doubt AI will enable software engineering teams to be more productive as additional advances are made, said Lau. For example, AI models trained for specific domains such as software engineering will become more commonplace, he noted. Many managers and businesspeople in the short term, however, are overestimating the impact AI can in the short term have on software development, he added.</p><p>In fact, 43% of the developers and engineers surveyed said feel that leadership at their company is out of the loop regarding the challenges software engineering teams face. Just under a third (31%) said their team lacks sufficient visibility into project status and well over a third (37%) said efficiency, predictability and productivity have all decreased on their team in the past year.</p><p>Overall, more than two-thirds said their engineering organization received a budget increase last year, with 57% of engineering leaders noting the size of their engineering team has increased over the past 12 months. More than half (56%) of all respondents expect the headcount in their department to increase over the next 12 months.</p><p>However, more than a third (34%) of developers/engineers do not feel the potential for advancement in their current role, with just under a third (32%) considering a career change. Nevertheless, 80% of all respondents said the work they do is rewarding.</p><p>Thanks to the rise of AI more software will probably be developed in the next few years than all of the past decade. The challenge now becomes how to manage a volume of code that is about to exponentially increase beyond what was once thought to be ever imaginable.</p>","contentLength":3386,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1j958n9/survey_surfaces_high_devops_burnout_rates_despite/"},{"title":"I wrote a concurrent log parser in Go to learn about concurrency","url":"https://www.reddit.com/r/golang/comments/1j94d6e/i_wrote_a_concurrent_log_parser_in_go_to_learn/","date":1741734163,"author":"/u/Tack1234","guid":334,"unread":true,"content":"<p>I wanted to learn about using Go for concurrent tasks (e.g. using goroutines and channels), so I built a tool to solve a real problem I had at work. I wanted to parse CLF (e.g. Apache or Nginx) logs and store them in SQLite so I would be able to perform further data analysis on them without having to resort to \"heavier\" tools like Grafana.</p><p>It is mostly meant as a practice project but maybe someone else could also find it handy someday. </p><p>It is a little rough around the edges but overall I achieved with it what I set out to do and working on it over the last few weeks has taught me a lot about Golang as a newbie. Coming from the overcomplicated world of Node.js (both on the frontend and backend), I've been loving the simplicity of Go!</p>","contentLength":740,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"The Startup CTO's Handbook","url":"https://github.com/ZachGoldberg/Startup-CTO-Handbook/blob/main/StartupCTOHandbook.md","date":1741731522,"author":"simonebrunozzi","guid":210,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43337703"},{"title":"6 Years ago I went all in on Linux, Now I'm just basically an AMD fanboy","url":"https://www.reddit.com/r/linux/comments/1j91f84/6_years_ago_i_went_all_in_on_linux_now_im_just/","date":1741726618,"author":"/u/Chaos_Blades","guid":348,"unread":true,"content":"<p>Lets go all the way back to my first PC. Intel P4 with an ATI X1300 (AGP Slot) Played so much Half Life 1/2 on this baby. Also Command and Conquer Generals. After this It was all Intel/Nvidia up to the GTX 1080. This is when I switched to linux because finally Proton. Quickly did I realize Nvidia GPUs on Linux were a problem. Especially once I wanted an HTPC with Holo ISO. This is when I went to the 5950X and 6900XT. Fantastic experience, has aged like fine wine. Just being part on the Linux community and looking at the Nvidia situation... Worse performance compared to Windows, tons of game specific bugs, Wayland issues, taking months to get driver issues fix, driver updates seem to break as much as they fix. So other than the HDMI 2.1 situation with AMD it has been smooth sailing. HDMI situation is more problems with HDMI Forum and TV makers not putting DisplayPort on TVs so I don't blame AMD for this at all. New GPUs just came out and I am not even considering or looking at what Nvidia is doing. Now lets talk about what is making me realize I am basically just an AMD fanboy at this point. I also have a TrueNAS server I have been running for over a decade (FreeNAS 9.2). Which other than a short period of time I was using an AMD Opteron CPU has also traditionally been Intel/Nvidia. That leads us to today. I am about to go out and upgrade a perfectly working Nvidia Quadro M2000 with an AMD Radeon Pro W6400 only because Nvidia driver (reoccurring theme) has issues with locking up SPICE remote desktop instance. Now while I was trying to find a fix for this problem I decided to do a little research for a motherboard/CPU upgrade and low and behold The best price to performance and power savings is a used 2nd gen AMD EPYC to replace my dual socket E5-2680 v3s (I need a lot of PCI-E). At this point the only Intel/Nvidia parts I have is a Quadro P4000 for Plex transcoding and an Intel Atom C3758R in my pfSense box. I also have a Framework 16 and guess what, all AMD.</p><p>So TLDR, Nvidia sucks on Linux by pretty much every metric other than video encoding and decoding. Intel GPUs are not as fast as AMD for gaming and maybe one day Intel Arc Pro (A60?) will replace my Quadro P4000 but that day is not today. Intel CPUs just are not as good as AMD right now as far as I am concerned or maybe I am truly a fanboy at this point.</p><p>Also if anybody is wondering by current distros of choice are... TrueNAS SCALE<p> Bazzite (KDE, until COSMIC is stable) (Desktop, Laptop, HTPC) BIG Pop!_OS fan, just not a good distro right now. Also I have kind of fallen in love with immutable fedora.</p></p>","contentLength":2597,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"gotmux - Go library for tmux","url":"https://github.com/GianlucaP106/gotmux","date":1741725190,"author":"/u/One_Mess_1093","guid":331,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/golang/comments/1j90umi/gotmux_go_library_for_tmux/"},{"title":"CLI latin/Catholic bible reader with an interactive mode.","url":"https://gitlab.com/gee.8ruhs/writteninc/-/raw/main/latinbible.c","date":1741722031,"author":"/u/Beautiful_Crab6670","guid":345,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/linux/comments/1j8zkg6/cli_latincatholic_bible_reader_with_an/"},{"title":"Graph RAG explained","url":"https://diamantai.substack.com/p/graph-rag-explained?r=336pe4&amp;utm_campaign=post&amp;utm_medium=web&amp;triedRedirect=true","date":1741721046,"author":"/u/Diamant-AI","guid":351,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1j8z5v0/graph_rag_explained/"},{"title":"[media] Dioxus Subsecond Rust Hotpatch Engine + Ratatui ❤️","url":"https://www.reddit.com/r/rust/comments/1j8z3yb/media_dioxus_subsecond_rust_hotpatch_engine/","date":1741720916,"author":"/u/jkelleyrtp","guid":360,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"I’m porting over smolagents to go, interested developers?","url":"https://www.reddit.com/r/golang/comments/1j8z3js/im_porting_over_smolagents_to_go_interested/","date":1741720888,"author":"/u/wait-a-minut","guid":333,"unread":true,"content":"<p>Python has been dominating the AI tooling space but not much longer. The whole agent movement is heavily reliant on networking patterns, microservices, orchestrations etc which makes Go absolutely perfect for this </p><p>I’ve really liked the approach hugging face took with smolagents which is NOT bloated and overly abstracted thing like langchain. </p><p>It’s minimal and manages just state, orchestration, and tools. Which is what agents are. </p><p>Anyone want to help me fully port this lib over to go so we can finally let go shine in the AI agent department?</p>","contentLength":549,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Show HN: Program Explorer, a container playground","url":"https://programexplorer.org/","date":1741710808,"author":"aconz2","guid":206,"unread":true,"content":"<div>\n            Alpha preview, site may be unavailable without notice\n        </div>","contentLength":75,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43334192"},{"title":"Show HN: Krep a High-Performance String Search Utility Written in C","url":"https://davidesantangelo.github.io/krep/","date":1741709563,"author":"daviducolo","guid":205,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43333946"},{"title":"Show HN: We built a Plug-in Home Battery for the 99.7% of us without Powerwalls","url":"https://pilaenergy.com/","date":1741708113,"author":"coleashman","guid":204,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43333661"},{"title":"A 10x Faster TypeScript","url":"https://devblogs.microsoft.com/typescript/typescript-native-port/","date":1741703543,"author":"DanRosenwasser","guid":249,"unread":true,"content":"<p>Today I’m excited to announce the next steps we’re taking to radically improve TypeScript performance.</p><p>The core value proposition of TypeScript is an excellent developer experience.\nAs your codebase grows, so does the value of TypeScript itself, but in many cases TypeScript has not been able to scale up to the very largest codebases.\nDevelopers working in large projects can experience long load and check times, and have to choose between reasonable editor startup time or getting a complete view of their source code.\nWe know developers love when they can rename variables with confidence, find all references to a particular function, easily navigate their codebase, and do all of those things without delay.\nNew experiences powered by AI benefit from large windows of semantic information that need to be available with tighter latency constraints.\nWe also want fast command-line builds to validate that your entire codebase is in good shape.</p><p>To meet those goals, we’ve begun work on a native port of the TypeScript compiler and tools.\nThe native implementation will <strong>drastically improve editor startup, reduce most build times by 10x, and substantially reduce memory usage</strong>.\nBy porting the current codebase, we expect to be able to preview a native implementation of  capable of command-line typechecking by mid-2025, with a feature-complete solution for project builds and a language service by the end of the year.</p><p>You can , which is offered under the same license as the existing TypeScript codebase.\nCheck the README for instructions on how to build and run  and the language server, and to see a summary of what’s implemented so far.\nWe’ll be posting regular updates as new functionality becomes available for testing.</p><p>Our native implementation is already capable of loading many popular TypeScript projects, including <a href=\"https://github.com/microsoft/TypeScript/tree/main/src/compiler\">the TypeScript compiler itself</a>.\nHere are times to run  on some popular codebases on GitHub of varying sizes:</p><table><thead><tr></tr></thead></table><p>While we’re not yet feature-complete, these numbers are representative of the order of magnitude performance improvement you’ll see checking most codebases.</p><p>We’re incredibly excited about the opportunities that this massive speed boost creates. Features that once seemed out of reach are now within grasp.\nThis native port will be able to provide instant, comprehensive error listings across an entire project, support more advanced refactorings, and enable deeper insights that were previously too expensive to compute.\nThis new foundation goes beyond today’s developer experience and will enable the next generation of AI tools to enhance development, powering new tools that will learn, adapt, and improve the coding experience.</p><p>Most developer time is spent in editors, and it’s where performance is most important.\nWe want editors to load large projects quickly, and respond quickly in all situations.\nModern editors like Visual Studio and Visual Studio Code have excellent performance as long as the underlying language services are also fast.\nWith our native implementation, we’ll be able to provide incredibly fast editor experiences.</p><p>Again using the Visual Studio Code codebase as a benchmark, the current time to load the entire project in the editor on a fast computer is about 9.6 seconds.\nThis drops down to about 1.2 seconds with the native language service, an <strong>8x improvement in project load time</strong> in editor scenarios.\nWhat this translates to is a faster working experience from the time you open your editor to your first keystroke in any TypeScript codebase.\nWe expect all projects to see this level of improvement in load time.</p><p>Overall memory usage also appears to be roughly half of the current implementation, though we haven’t actively investigated optimizing this yet and expect to realize further improvements.\nEditor responsiveness for all language service operations (including completion lists, quick info, go to definition, and find all references) will also see significant speed gains.\nWe’ll also be moving to the Language Server Protocol (LSP), a longstanding infrastructural work item to better align our implementation with other languages.</p><p>Our most recent TypeScript release was TypeScript 5.8, with TypeScript 5.9 coming soon.\nThe JS-based codebase will continue development into the 6.x series, and TypeScript 6.0 will introduce some deprecations and breaking changes to align with the upcoming native codebase.</p><p>When the native codebase has reached sufficient parity with the current TypeScript, we’ll be releasing it as .\nThis is still in development and we’ll be announcing stability and feature milestones as they occur.</p><p>For the sake of clarity, we’ll refer to them simply as TypeScript 6 (JS) and TypeScript 7 (native), since this will be the nomenclature for the foreseeable future.\nYou may also see us refer to “Strada” (the original TypeScript codename) and “Corsa” (the codename for this effort) in internal discussions or code comments.</p><p>While some projects may be able to switch to TypeScript 7 upon release, others may depend on certain API features, legacy configurations, or other constraints that necessitate using TypeScript 6.\nRecognizing TypeScript’s critical role in the JS development ecosystem, we’ll still be maintaining the JS codebase in the 6.x line until TypeScript 7+ reaches sufficient maturity and adoption.</p><p>Our long-term goal is to keep these versions as closely aligned as possible so that you can upgrade to TypeScript 7 as soon as it meets your requirements, or fall back to TypeScript 6 if necessary.</p><p>In the coming months we’ll be sharing more about this exciting effort, including deeper looks into performance, a new compiler API, LSP, and more.\nWe’ve written up some <a href=\"https://github.com/microsoft/typescript-go/discussions/categories/faqs\">FAQs</a> on the GitHub repo to address some questions we expect you might have.\nWe also invite you to join us for an AMA at the <a href=\"https://discord.gg/typescript\">TypeScript Community Discord</a> at  on March 13th.</p><p>A 10x performance improvement represents a massive leap in the TypeScript and JavaScript development experience, so we hope you are as enthusiastic as we are for this effort!</p>","contentLength":6051,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43332830"},{"title":"Happy 20th birthday, Y Combinator","url":"https://twitter.com/garrytan/status/1899092996702048709","date":1741702475,"author":"btilly","guid":248,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43332658"},{"title":"Show HN: Factorio Learning Environment – Agents Build Factories","url":"https://jackhopkins.github.io/factorio-learning-environment/","date":1741694522,"author":"noddybear","guid":203,"unread":true,"content":"<p>I'm Jack, and I'm excited to share a project that has channeled my Factorio addiction recently: the Factorio Learning Environment (FLE).</p><p>FLE is an open-source framework for developing and evaluating LLM agents in Factorio. It provides a controlled environment where AI models can attempt complex automation, resource management, and optimisation tasks in a grounded world with meaningful constraints.</p><p>A critical advantage of Factorio as a benchmark is its unbounded nature. Unlike many evals that are quickly saturated by newer models, Factorio's geometric complexity scaling means it won't be \"solved\" in the next 6 months (or possibly even years). This allows us to meaningfully compare models by the order-of-magnitude of resources they can produce - creating a benchmark with longevity.</p><p>The project began 18 months ago after years of playing Factorio, recognising its potential as an AI research testbed. A few months ago, our team (myself, Akbir, and Mart) came together to create a benchmark that tests agent capabilities in spatial reasoning and long-term planning.</p><p>Two technical innovations drove this project forward: First, we discovered that piping Lua into the Factorio console over TCP enables running (almost) arbitrary code without directly modding the game. Second, we developed a first-class Python API that wraps these Lua programs to provide a clean, type-hinted interface for AI agents to interact with Factorio through familiar programming paradigms.</p><p>Agents interact with FLE through a REPL pattern:\n1. They observe the world (seeing the output of their last action)\n2. Generate Python code to perform their next action\n3. Receive detailed feedback (including exceptions and stdout)</p><p>We provide two main evaluation settings:\n- Lab-play: 24 structured tasks with fixed resources\n- Open-play: An unbounded task of building the largest possible factory on a procedurally generated map</p><p>We found that while LLMs show promising short-horizon skills, they struggle with spatial reasoning in constrained environments. They can discover basic automation strategies (like electric-powered drilling) but fail to achieve more complex automation (like electronic circuit manufacturing). Claude Sonnet 3.5 is currently the best model (by a significant margin).</p><p>You'll need:\n- Factorio (version 1.1.110)\n- Docker\n- Python 3.10+</p><p>The README contains detailed installation instructions and examples of how to run evaluations with different LLM agents.</p><p>We would love to hear your thoughts and see what others can do with this framework!</p>","contentLength":2527,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43331582"},{"title":"REST vs GraphQL","url":"https://blog.algomaster.io/p/rest-vs-graphql","date":1741668622,"author":"Ashish Pratap Singh","guid":456,"unread":true,"content":"<p> are the backbone of modern applications, acting as the bridge between <strong>client applications and backend servers</strong>.</p><p>Among the many API design choices,  and  have emerged as two dominant approaches.</p><p>Both offer powerful ways to retrieve and manipulate data, but they are built on fundamentally different philosophies.</p><p>REST, a time-tested architectural style, structures APIs around <strong>fixed endpoints and HTTP methods</strong>, making it intuitive and widely adopted. </p><p>On the other hand, GraphQL, a newer query language developed by Facebook, takes a more <strong>flexible and efficient approach</strong>, allowing clients to request exactly the data they need in a single request.</p><p>In this article, we’ll break down REST and GraphQL, compare their differences, and help you decide which one is best suited for your use case.</p><p> emerged in the early 2000s as a set of architectural principles for designing networked applications.</p><p>REST is not a protocol or standard but rather a <strong>set of guiding principles</strong> that leverage the existing  to enable communication between clients and servers.</p><p>At its core, REST is built around . Each resource (such as a user, order, or product) is uniquely identified by a Uniform Resource Locator, and clients interact with these resources using a <strong>fixed set of HTTP methods</strong>.</p><ul><li><p> → Retrieve a resource (e.g.,  to fetch user data).</p></li><li><p> → Create a new resource (e.g.,  to add a new user).</p></li><li><p> → Update an existing resource (e.g.,  to update user details).</p></li><li><p> → Remove a resource (e.g.,  to delete a user).</p></li></ul><p>For example, let’s say a client needs information about a specific user with .</p><ul><li><p>The client makes a request</p></li><li><p>The server responds with a JSON representation of the user</p></li></ul><p>REST APIs typically  and use  to communicate the outcome of the request:</p><ul><li><p> → Resource successfully created</p></li><li><p> → Client error (e.g., missing required fields)</p></li><li><p> → Requested resource does not exist</p></li><li><p><strong>500 Internal Server Error</strong> → Unexpected server issue</p></li></ul><ul><li><p><strong>Simplicity and Intuitive Design</strong>: The resource-based model aligns well with most business domains, making REST intuitive for developers.</p></li><li><p>: Each request contains all the information needed to complete it, making REST scalable across distributed systems.</p></li><li><p>: HTTP's caching mechanisms can be leveraged to improve performance.</p></li><li><p>REST APIs can be easily scaled using load balancers and CDNs.</p></li><li><p>: With nearly two decades of widespread use, REST enjoys robust tooling, documentation, and developer familiarity.</p></li></ul><ul><li><p>REST endpoints often return , leading to inefficient network usage. For example, if a mobile app only needs a user’s name and email, but the API response includes additional fields like address, phone number, and metadata, it results in .</p></li><li><p>: If an API doesn’t return related data, the client may need to  to retrieve all required information. For example, to get user details and their posts, a client might have to make:</p><ol><li><p> (fetch user)</p></li><li><p> (fetch user’s posts)</p></li></ol></li><li><p>: When APIs evolve, maintaining backward compatibility becomes difficult. REST APIs often require  (, ), adding maintenance overhead.</p></li><li><p><strong>Rigid Response Structure:</strong> The server defines how data is returned, and clients must adapt to it—even if they only need a subset of the data.</p></li></ul><p>For years,  was the de facto standard for building APIs. However, as applications grew more complex, REST began to show limitations—especially in scenarios where clients needed fine-grained control over the data they fetched.</p><p>To address these challenges, <strong>Facebook introduced GraphQL in 2015</strong>, offering a more flexible and efficient approach to data retrieval.</p><p>Unlike REST, which organizes APIs around <strong>fixed endpoints and HTTP methods</strong>, GraphQL is a  that allows clients to request exactly the data they need—nothing more, nothing less.</p><blockquote><p>A  () replaces multiple REST endpoints, allowing clients to structure their own queries instead of relying on predefined responses.</p></blockquote><p>Here, the query asks for a <strong>specific user's firstName, email, profileUrl and posts</strong>, all within a </p><p>GraphQL aggregates the data from multiple services and returns precisely the requested data.</p><p>It solves the problems of  (getting unnecessary data) and  (requiring multiple requests to retrieve related data).</p><p>Unlike REST, where API responses are  and may vary across versions, <strong>GraphQL enforces a strict schema</strong> that defines the shape of the data.</p><p>A simple GraphQL schema for the above example might look like this:</p><pre><code>type User {\n  id: ID!\n  firstName: String!\n  lastName: String!\n  email: String!\n  profile: Profile!\n  posts: [Post!]\n}\n\ntype Profile {\n  id: ID!\n  url: String!\n}\n\ntype Post {\n  id: ID!\n  title: String!\n  publishedDate: String!\n  content: String!\n  author: User!\n}\n\ntype Query {\n  user(id: ID!): User\n  posts: [Post!]!\n}</code></pre><h3>Three Core Functionalities of GraphQL</h3><p>GraphQL provides three core functionalities:</p><p>Similar to GET requests in REST, GraphQL queries allow clients to request specific fields of data.</p><p>Clients have full control over what they retrieve, avoiding unnecessary data fetching.</p><p><strong>Example: Fetching specific user and post details in a single request</strong></p><pre><code>query {\n  user(id: 123) {\n    name\n    email\n    posts {\n      title\n      content\n    }\n  }\n}</code></pre><p>Equivalent to <strong>POST, PUT, PATCH, or DELETE</strong> in REST. Used to <strong>create, update, or delete</strong> resources in the API.</p><p><strong>Example: Creating a new post</strong></p><pre><code>mutation {\n  createPost(title: \"GraphQL vs REST\", content: \"GraphQL solves many of REST's limitations...\", publishedDate: \"2025-03-10\") {\n    id\n    title\n    content\n  }\n}</code></pre><p>The response will contain the newly created post with its .</p><h4>3.  → Real-Time Updates</h4><p>Unlike REST, which requires polling or WebSockets for real-time updates, GraphQL subscriptions enable clients to listen for changes and receive updates automatically when data is modified.</p><p>Ideal for chat applications, live feeds, stock market updates, and notifications.</p><p><strong>Example: Listening for new posts</strong></p><pre><code>subscription {\n  newPost {\n    title\n    content\n    author {\n      name\n    }\n  }\n}</code></pre><p>Whenever a , all subscribed clients will .</p><h3><strong>How GraphQL Differs from REST</strong></h3><p>Both GraphQL and REST rely on <strong>HTTP requests and responses</strong>, but they differ in how they structure and deliver data.</p><ul><li><p>REST centers around resources (each identified by a URL).</p></li><li><p>GraphQL centers around a schema that defines the types of data available.</p></li></ul><p>In REST, the  decides which data is included in a response. If a client requests a blog post, the API might also return related , even if they aren’t needed.</p><p>With GraphQL, the  what to fetch. This makes GraphQL more flexible but also introduces challenges in <strong>caching and performance optimization</strong>.</p><ol><li><p>: Clients can request only the fields they need, reducing over-fetching and under-fetching.</p></li><li><p><strong>Single Request for Multiple Resources</strong>: Related data can be retrieved in one request, solving REST’s  query problem.</p></li><li><p>: GraphQL APIs use a schema to define available data, making them easier to explore and document.</p></li><li><p><strong>Real-time Data with Subscriptions:</strong> GraphQL natively supports real-time data updates through subscriptions, enabling clients to receive automatic notifications whenever data changes on the server.</p></li><li><p><strong>API Evolution Without Versioning</strong>: New fields can be added without breaking existing queries, avoiding REST-style ,  versioning issues.</p></li></ol><ol><li><p>: Unlike REST, which can be used with basic HTTP clients (cURL, browsers), GraphQL requires a GraphQL server, schema, and resolvers.</p></li><li><p>: REST APIs leverage HTTP caching (e.g., browser caching, CDNs), but GraphQL queries use POST requests, making caching trickier.</p></li><li><p> Since clients can request arbitrary amounts of data, GraphQL APIs must be carefully optimized to prevent performance issues.</p></li><li><p> Unoptimized queries (e.g., deeply nested requests) can lead to costly database scans, increasing the risk of denial-of-service (DoS) attacks.</p></li></ol><h3>Performance Risks with GraphQL</h3><p>Imagine a mobile app introduces a  that unexpectedly triggers a  on a critical database table.</p><p>With REST, this scenario is less likely because API endpoints are predefined, and developers control how data is exposed.</p><p>With GraphQL, the client , which could inadvertently request massive amounts of data. If a poorly designed query is executed on a high-traffic service, it could <strong>bring down the entire database</strong>.</p><p>To mitigate this, GraphQL APIs require <strong>strict query rate limiting, depth restrictions, and cost analysis mechanisms</strong>—adding additional complexity to the implementation.</p><p>There is no  answer.  remains a great choice for simple APIs, while  is powerful for complex applications with varying data needs.</p><p>Ultimately, it’s not about which is better, but which is better for your specific needs.</p><ul><li><p>Your API is simple and doesn’t require flexible queries.</p></li><li><p>You need caching benefits from HTTP. </p></li><li><p>You need a standardized, well-established API  approach.</p></li><li><p>You’re integrating with third-party services.</p></li><li><p>Your team is already familiar with REST and need faster implementation.</p></li></ul><ul><li><p>You need flexible and efficient data fetching.</p></li><li><p>Your API serves multiple clients (mobile, web, IoT) with different data needs.</p></li><li><p>Real-time updates are required (GraphQL subscriptions). </p></li><li><p>You want to avoid API versioning issues.</p></li><li><p>Your application requires deeply nested data</p></li></ul><h4><strong>Can You Use Both REST and GraphQL?</strong></h4><p>Absolutely! REST and GraphQL are , and many organizations implement a  to get the best of both worlds:</p><ul><li><p>GraphQL for client-facing applications where flexibility, performance, and dynamic querying are essential.</p></li><li><p>REST for admin interfaces, third-party integrations, and internal microservices where statelessness, caching, and simplicity are beneficial.</p></li></ul><p>If you found it valuable, hit a like ❤️ and consider subscribing for more such content every week.</p><div data-attrs=\"{&quot;url&quot;:&quot;https://blog.algomaster.io/p/how-i-mastered-data-structures-and-algorithms?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share&amp;token=eyJ1c2VyX2lkIjo4MzYwMjc0MywicG9zdF9pZCI6MTQ1NjU1MjUyLCJpYXQiOjE3MjE1MjE3MzEsImV4cCI6MTcyNDExMzczMSwiaXNzIjoicHViLTIyMDIyNjgiLCJzdWIiOiJwb3N0LXJlYWN0aW9uIn0.2cNY811YEugd5iH9XJQhakBzyahGqF7PcATBlFj5J2w&quot;,&quot;text&quot;:&quot;Share&quot;}\" data-component-name=\"CaptionedButtonToDOM\"><div><p>This post is public so feel free to share it.</p></div></div><p> If you’re enjoying this newsletter and want to get even more value, consider becoming a .</p><p>I hope you have a lovely day!</p>","contentLength":9590,"flags":null,"enclosureUrl":"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc4d86506-cb5f-4c9f-a56a-257439ec46eb_1666x1210.png","enclosureMime":"","commentsUrl":null},{"title":"Show HN: Seven39, a social media app that is only open for 3 hours every evening","url":"https://www.seven39.com/","date":1741655110,"author":"mklyons","guid":202,"unread":true,"content":"<p>Because social media is better when we're all online together.</p><p>No endless scrolling. No FOMO. Just 3 hours of fun every evening.</p><p>The domain was available.</p>","contentLength":152,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43328095"},{"title":"Developer Convicted For 'Kill Switch' Code Activated Upon His Termination","url":"https://developers.slashdot.org/story/25/03/10/1921202/developer-convicted-for-kill-switch-code-activated-upon-his-termination?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1741635000,"author":"msmash","guid":290,"unread":true,"content":"A 55-year-old software developer faces up to 10 years in prison after being convicted for deploying malicious code that sabotaged his former employer's network, causing hundreds of thousands of dollars in losses. \n\nDavis Lu was convicted by a jury for causing intentional damage to protected computers owned by power management company Eaton Corp., the US Department of Justice announced Friday. Lu, who worked at Eaton for 11 years, became disgruntled after a 2018 corporate \"realignment\" reduced his responsibilities. \n\nHe created malicious code that deleted coworker profile files, prevented logins, and caused system crashes. His most destructive creation was a \"kill switch\" named \"IsDLEnabledinAD\" that automatically activated upon his termination in 2019, disrupting Eaton's global operations. Lu admitted to creating some malicious code but plans to appeal the verdict.","contentLength":877,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null}],"tags":["dev"]}