{"id":"82kPqomaPXmNomrHzpZWfbkQxiiNUBTAYKxHR5qZBEpf","title":"Hacker News: Show HN","displayTitle":"HN Show","url":"https://hnrss.org/show?points=60","feedLink":"https://news.ycombinator.com/shownew","isQuery":false,"isEmpty":false,"isHidden":false,"itemCount":19,"items":[{"title":"Show HN: Quibbler ‚Äì A critic for your coding agent that learns what you want","url":"https://github.com/fulcrumresearch/quibbler","date":1761871437,"author":"etherio","guid":160,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45767162"},{"title":"Show HN: I made a heatmap diff viewer for code reviews","url":"https://0github.com/","date":1761834118,"author":"lawrencechen","guid":159,"unread":true,"content":"<p>0github.com is a pull request viewer that color-codes every diff line/token by how much human attention it probably needs. Unlike PR-review bots, we try to flag not just by \"is it a bug?\" but by \"is it worth a second look?\" (examples: hard-coded secret, weird crypto mode, gnarly logic, ugly code).</p><p>To try it, replace github.com with 0github.com in any pull-request URL. Under the hood, we split the PR into individual files, and for each file, we ask an LLM to annotate each line with a data structure that we parse into a colored heatmap.</p><p>Notice how all the example links have a 0 prepended before github.com. This navigates you to our custom diff viewer where we handle the same URL path parameters as github.com. Darker yellows indicate that an area might require more investigation. Hover on the highlights to see the LLM's explanation. There's also a slider on the top left to adjust the \"should review\" threshold.</p>","contentLength":918,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45760321"},{"title":"Show HN: In a single HTML file, an app to encourage my children to invest","url":"https://roberdam.com/en/dinversiones.html","date":1761820761,"author":"roberdam","guid":158,"unread":true,"content":"<p><em>‚ÄúWhat comes with the milk, leaves with the soul‚Äù</em></p><div><img src=\"https://roberdam.com/assets/images/iconodinversion.jpg\" alt=\"This is how the icon will appear on your phone\"><p>This is how the icon will appear on your phone</p></div><p>One thing that  (not even high school) is <strong>how to manage your personal finances</strong>.</p><p>As my eldest son‚Äôs birthday was approaching, we suggested that instead of asking for physical gifts, he ask for their equivalent in money. That way, he gathered a <strong>decent amount of capital for his first investment adventure.</strong></p><p>I explained to my kids that <strong>investing is like having a magic box</strong> that generates more money over time. To make it more visual and interactive, I decided to create a small app where they could <strong>see their investment grow day by day</strong>.</p><p>My first idea was to build a <strong>physical piggy bank with a display</strong>, showing the accumulated amount. However, that mixed up the concept of  with , and also required buying extra hardware.</p><p>So I looked for a quicker, cheaper way:  and create a simple app using plain HTML.</p><p>The result was , a mix between  and .</p><p>The app is essentially  that installs on the phone as a <strong>PWA (Progressive Web App)</strong>.</p><p>The phone is  and works as a  where my kids can see <strong>their money growing each day.</strong></p><p>I act as their , assigning  ‚Äî high enough to keep them motivated, but moderate enough to reflect how the real world works.</p><p>The app includes a screen where you can enter:</p><ul></ul><div><img src=\"https://roberdam.com/assets/images/pantacel1.jpg\" alt=\"Configuration screen\"></div><p>With that data, the app automatically calculates and displays:</p><ul></ul><div><img src=\"https://roberdam.com/assets/images/pantacel0.jpg\" alt=\"D-iNvestments dashboard screen\"><p>Dashboard view installed on the fridge showing daily growth.</p></div><ul><li>A  to attach it to the fridge</li></ul><div><img src=\"https://roberdam.com/assets/images/celular1.jpg\" alt=\"Affordable phone mount\"><p>Affordable phone mount - Price on AliExpress: $0.90</p></div><ul><li>, in HTML format</li></ul><div><img src=\"https://roberdam.com/assets/images/heladera.jpg\" alt=\"Phone installed on the fridge\"><p>D-iNvestments showing daily capital growth.</p></div><p>The process is as simple as opening the link from a smartphone and tapping  when prompted by the browser.\nFrom then on, it behaves like a native app.</p><p>The goal wasn‚Äôt just to teach my kids the value of money, but to <strong>show them visually how investment and time work as allies.</strong></p><p>Each day, as they watch their small fund grow, <strong>they grasp the magic of compound interest</strong> ‚Äî and that, more than any gift, is a lesson I hope will stay with them for life.</p><blockquote><p>üí¨ <strong>Want to comment or improve the app? Contact me at:</strong><a href=\"https://x.com/roberdam\">@roberdam</a></p></blockquote>","contentLength":2035,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45758421"},{"title":"Show HN: Learn German with Games","url":"https://www.learngermanwithgames.com/","date":1761738658,"author":"predictand","guid":157,"unread":true,"content":"<h2>Choose Your Learning Adventure</h2><p>Select a game below and start mastering German in an engaging, interactive way!</p>","contentLength":109,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45745566"},{"title":"Show HN: Apache Fory Rust ‚Äì 10-20x faster serialization than JSON/Protobuf","url":"https://fory.apache.org/blog/2025/10/29/fory_rust_versatile_serialization_framework/","date":1761674331,"author":"chaokunyang","guid":156,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45736400"},{"title":"Show HN: Pipelex ‚Äì Declarative language for repeatable AI workflows","url":"https://github.com/Pipelex/pipelex","date":1761668366,"author":"lchoquel","guid":155,"unread":true,"content":"<p>We‚Äôre Robin, Louis, and Thomas. Pipelex is a DSL and a Python runtime for repeatable AI workflows. Think Dockerfile/SQL for multi-step LLM pipelines: you declare steps and interfaces; any model/provider can fill them.</p><p>Why this instead of yet another workflow builder?</p><p>- Declarative, not glue code: you state what to do; the runtime figures out how.\n- Agent-first: each step carries natural-language context (purpose, inputs/outputs with meaning) so LLMs can follow, audit, and optimize. Our MCP server enables agents to run pipelines but also to build new pipelines on demand.\n- Open standard under MIT: language spec, runtime, API server, editor extensions, MCP server, n8n node.\n- Composable: pipes can call other pipes, created by you or shared in the community.</p><p>Why a domain-specific language?</p><p>- We need context, meaning and nuances preserved in a structured syntax that both humans and LLMs can understand\n- We need determinism, control, and reproducibility that pure prompts can't deliver\n- Bonus: editors, diffs, semantic coloring, easy sharing, search &amp; replace, version control, linters‚Ä¶</p><p>Initially, we just wanted to solve every use-case with LLMs but kept rebuilding the same agentic patterns across different projects. So we challenged ourselves to keep the code generic and separate from use-case specifics, which meant modeling workflows from the relevant knowledge and know-how.</p><p>Unlike existing code/no-code frameworks for AI workflows, our abstraction layer doesn't wrap APIs, it transcribes business logic into a structured, unambiguous script executable by software and AI. Hence the \"declarative\" aspect: the script says what should be done, not how to do it. It's like a Dockerfile or SQL for AI workflows.</p><p>Additionally, we wanted the language to be LLM-friendly. Classic programming languages hide logic and context in variable names, functions, and comments: all invisible to the interpreter. In Pipelex, these elements are explicitly stated in natural language, giving AI full visibility: it's all logic and context, with minimal syntax.</p><p>Then, we didn't want to write Pipelex scripts ourselves so we dogfooded: we built a Pipelex workflow that writes Pipelex workflows. It's in the MCP and CLI: \"pipelex build pipe '‚Ä¶'\" runs a multi-step, structured generation flow that produces a validated workflow ready to execute with \"pipelex run\". Then you can iterate on it yourself or with any coding agent.</p><p>What‚Äôs included: Python library, FastAPI and Docker, MCP server, n8n node, VS Code extension.</p><p>1. Build a workflow: did the language work for you or against you?\n2. Agent/MCP workflows and n8n node usability.\n3. Suggest new kinds of pipes and other AI models we could integrate\n4. Looking for OSS contributors to the core library but also to share pipes with the community</p><p>- Connectors: Pipelex doesn‚Äôt integrate with ‚Äúyour apps‚Äù, we focus on the cognitive steps, and you can integrate through code/API or using MCP or n8n\n- Visualization: we need to generate flow-charts\n- The pipe builder is still buggy\n- Run it yourself: we don‚Äôt yet provide a hosted Pipelex API, it‚Äôs in the works\n- Cost-tracking: we only track LLM costs, not image generation or OCR costs yet\n- Caching and reasoning options: not supported yet</p><p>Thanks for reading. If you try Pipelex, tell us exactly where it hurts, that‚Äôs the most valuable feedback we can get.</p>","contentLength":3363,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45734865"},{"title":"Show HN: Research Hacker News, ArXiv & Google with Hierarchical Bayesian Models","url":"https://sturdystatistics.com/deepdive-search","date":1761666591,"author":"kianN","guid":154,"unread":true,"content":"<!DOCTYPE html>","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45734429"},{"title":"Show HN: Bash Screensavers","url":"https://github.com/attogram/bash-screensavers","date":1761649952,"author":"attogram","guid":153,"unread":true,"content":"<p>A github project to collect a bunch of bash-based screensavers/visualizations.</p>","contentLength":78,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45731366"},{"title":"Show HN: Meals You Love ‚Äì AI-powered meal planning and grocery shopping","url":"https://mealsyoulove.com/","date":1761587838,"author":"tylertreat","guid":152,"unread":true,"content":"<!DOCTYPE html>","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45724229"},{"title":"Show HN: JSON Query","url":"https://jsonquerylang.org/","date":1761582172,"author":"wofo","guid":151,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45722826"},{"title":"Show HN: Erdos ‚Äì open-source, AI data science IDE","url":"https://www.lotas.ai/erdos","date":1761581338,"author":"jorgeoguerra","guid":150,"unread":true,"content":"<p>Fast, accurate Jupyter notebook edits</p><p>Erdos lets data scientists create, edit, and iterate on Jupyter notebooks faster and more accurately than ever before.</p>","contentLength":155,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45722635"},{"title":"Show HN: ISS in Real Time ‚Äì 25 Years Aboard the International Space Station","url":"https://issinrealtime.org/","date":1761575100,"author":"bfeist","guid":149,"unread":true,"content":"<!DOCTYPE html>","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45721352"},{"title":"Show HN: Write Go code in JavaScript files","url":"https://www.npmjs.com/package/vite-plugin-use-golang","date":1761543373,"author":"yar-kravtsov","guid":148,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45717724"},{"title":"Show HN: Helium Browser for Android with extensions support, based on Vanadium","url":"https://github.com/jqssun/android-helium-browser","date":1761518462,"author":"jqssun","guid":147,"unread":true,"content":"<p>Been working on an experimental Chromium-based browser that brings 2 major features to your phone/tablet:</p><p>1. desktop-style extensions: natively install any extensions (like uBO) from the chrome web store, just toggle \"desktop site\" in the menu first.</p><p>2. privacy/security hardening: applies the full patch sets from Vanadium (with Helium's currently wip).</p><p>Means you get both browsers' excellent privacy features, like Vanadium's webrtc IP policy option that protects your real IP by default, and security improvements such as JIT being disabled by default, all while being a reasonably efficient FOSS app that can be installed on any (modern) android.</p><p>It's still in beta, and as I note in the README, it's not a replacement for the full OS-level security model you'd get from running the GrapheneOS Vanadium combo. However, goal was to combine privacy of Vanadium with the power of desktop extensions and Helium features, and make it accessible to a wider audience. (Passkeys from Bitwarden Mobile should also work straight away once merged in the list of FIDO2 privileged browsers)</p><p>Build scripts are in the repo if you want to compile it yourself. You can find pre-built releases there too.</p><p>Would love any feedback/support!</p>","contentLength":1217,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45715752"},{"title":"Show HN: MyraOS ‚Äì My 32-bit operating system in C and ASM (Hack Club project)","url":"https://github.com/dvir-biton/MyraOS","date":1761511420,"author":"dvirbt","guid":146,"unread":true,"content":"<p>Hi HN, I‚Äôm Dvir, a young developer. Last year, I got rejected after a job interview because I lacked some CPU knowledge. After that, I decided to deepen my understanding in the low level world and learn how things work under the hood. I decided to try and create an OS in C and ASM as a way to broaden my knowledge in this area.</p><p>This took me on the most interesting ride, where I‚Äôve learned about OS theory and low level programming on a whole new level.  I‚Äôve spent hours upon hours, blood and tears, reading different OS theory blogs, learning low level concepts, debugging, testing and working on this project.</p><p>This part was the longest, but also the easiest. I felt like I understood the theory, but still could not connect it into actual code. Sitting down and starting to code was difficult, but I knew that was the next step I needed to  take! \nI began by working on the bootloader, which is optional since you can use a pre-made one (I switched to GRUB later), but implementing it was mainly for learning purposes and to warm up on ASM. These were my steps after that:</p><pre><code>  1) I started implementing the VGA driver, which gave me the ability to display text.\n  2) Interrupts - IDT, ISR, IRQ, which signal to the CPU that a certain event occurred and needs handling (such as faults, hardware connected device actions, etc).\n  3) Keyboard driver, which enables me to display the same text I type on my keyboard.\n  4) PMM (Physical memory management)\n  5) Paging and virtual memory management\n  6) RTC driver - clock addition (which was, in my opinion, optional)\n  7) PIT driver - Ticks every certain amount of time, and also  \n  8) FS (File System) and physical HDD drivers - for the HDD I chose PATA (HDD communication protocol) for simplicity (SATA is a newer but harder option as well).\n     For the FS I chose EXT2 (The Second Extended FileSystem), which is a foundational linux FS structure introduced in 1993. This FS structure is not the simplest,\n     but is very popular in hobby-OS, it is very supported, easy to set up and upgrade to newer EXT versions, it has a lot of materials online, compared to other\n     options. This was probably the longest and largest feature I had worked on.\n  9) Syscall support.\n  10) Libc implementation.\n  11) Processing and scheduling for multiprocessing.\n  12) Here I also made a shell to test it all.\n</code></pre>\nAt this point, I had a working shell, but later decided to go further and add a GUI! I was working on the FS (stage 8), when I heard about Hack Club‚Äôs Summer of Making (SoM). This was my first time practicing in HackClub, and I want to express my gratitude and share my enjoyment of participating in it.<p>At first I just wanted to declare the OS as finished after completing the FS, and a bit of other drivers, but because of SoM my perspective was changed completely. Because of the competition, I started to think that I needed to ship a complete OS, with processing, GUI and the bare minimum ability to run Doom. I wanted to show the community in SoM how everything works.</p><p>Then I worked on it for another 2 months, after finishing the shell, just because of SoM!,  totalling my project to almost 7 months of work. At this time I added full GUI support, with dirty rectangles and double buffering, I made a GUI mouse driver, and even made a full Doom port! things I would've never even thought about without participating in SoM.</p><p>Every project has challenges, especially in such a low level project. I had to do a lot of debugging while working on this, and it is no easy task. I highly recommend using GDB which helped me debug so many of my problems, especially memory ones.</p><p>The first major challenge I encountered was during the coding of processes - I realized that a lot of my paging code was completely wrong, poorly tested, and had to be reworked. During this time I was already in the competition and it was difficult keeping up with devlogs and new features while fixing old problems in a code I wrote a few months ago.</p><p>Some more major problems occurred when trying to run Doom, and unlike the last problem, this was a disaster. I had random PFs and memory problems, one run could work while the next one wouldn‚Äôt, and the worst part is that it was only on the Doom, and not on processes I created myself. These issues took a lot of time to figure out. I began to question the Doom code itself, and even thought about giving up on the whole project.</p><p>After a lot of time spent debugging, I fixed the issues. It was a combination of scheduling issues, Libc issues and the Qemu not having enough (wrongfully assuming 128MB for the whole OS was enough).</p><p>Finally, I worked throughout all the difficulties, and shipped the project! In the end, the experience working on this project was amazing. I learned a lot, grew and improved as a developer, and I thank SoM for helping to increase my motivation and make the project memorable and unique like I never imagined it would be.</p>","contentLength":4932,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45715055"},{"title":"Show HN: Diagram as code tool with draggable customizations","url":"https://github.com/RohanAdwankar/oxdraw","date":1761424738,"author":"RohanAdwankar","guid":145,"unread":true,"content":"<p>In the past I've used declarative diagram generation tools like Mermaid.js a lot for quickly drawing up things but for presentations or deliverables I find that I have to then move the generated diagrams over to a tool like Lucidchart which allows full control of the organization and customization.</p><p>Therefore I am now working on this to combine the benefits of both into just one tool which can do both functions.</p><p>The project is certainly in the early stages but if you find yourself making architecture diagrams I'd love to hear your thoughts on the idea or even a Github issue for a feature request!</p><p>One of the workflows I'm targeting is when an AI generates the first draft of the diagram (all the LLMs know .mmd syntax) and then the user can then customize it to their liking which I think can drastically speed up making complex diagrams!</p>","contentLength":841,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45706792"},{"title":"Show HN: Shadcn/UI theme editor ‚Äì Design and share Shadcn themes","url":"https://shadcnthemer.com/","date":1761421884,"author":"miketromba","guid":144,"unread":true,"content":"<p>¬© 2025 ShadcnThemer.com. All rights reserved.</p>","contentLength":46,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45706487"},{"title":"Show HN: I built an 8-bit CPU simulator in Python from scratch","url":"https://github.com/sql-hkr/tiny8","date":1761311618,"author":"sql-hkr","guid":143,"unread":true,"content":"<p>I built a tiny 8-bit CPU simulator in Python to better understand how computers work at a low level.\nIt visualizes registers, memory, and instructions in real-time, so you can actually see each operation as it happens. You can write simple assembly code and watch how the CPU executes it step by step.</p><p>The project is mainly for learning and experimentation, but I‚Äôd love feedback or ideas for improvement.</p>","contentLength":406,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45694272"},{"title":"Show HN: LLM Rescuer ‚Äì Fixing the billion dollar mistake in Ruby","url":"https://github.com/barodeur/llm_rescuer","date":1761309892,"author":"barodeur","guid":142,"unread":true,"content":"<p>&gt; \"In a world without nil safety, one gem dares to ask: 'What if we just guessed?'\"</p>","contentLength":83,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45694051"}],"tags":["dev","hn"]}