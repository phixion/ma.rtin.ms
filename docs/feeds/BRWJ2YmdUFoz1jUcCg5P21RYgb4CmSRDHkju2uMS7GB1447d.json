{"id":"BRWJ2YmdUFoz1jUcCg5P21RYgb4CmSRDHkju2uMS7GB1447d","title":"Mouse Vs Python","displayTitle":"Dev - Python Blog","url":"https://blog.pythonlibrary.org/feed","feedLink":"https://www.blog.pythonlibrary.org/","isQuery":false,"isEmpty":false,"isHidden":false,"itemCount":1,"items":[{"title":"An /intro to Python 3.14’s New Features","url":"https://www.blog.pythonlibrary.org/2025/10/09/an-intro-to-python-3-14s-new-features/","date":1760011518,"author":"Mike","guid":289,"unread":true,"content":"<p>Python 3.14 came out this week and has many new features and improvements. For the full details behind the release, the <a href=\"https://docs.python.org/3/whatsnew/3.14.html\">documentation</a> is the best source. However, you will find a quick overview of the major changes here.</p><p>As with most Python releases, backwards compatibility is rarely broken. However, there has been a push to clean up the standard library, so be sure to check out what was <a href=\"https://docs.python.org/3/whatsnew/3.14.html#removed\">removed</a> and what has been <a href=\"https://docs.python.org/3/whatsnew/3.14.html#deprecated\">deprecated</a>. In general, most of the items in these lists are things the majority of Python users do not use anyway.</p><p>But enough with that. Let’s learn about the big changes!</p><p>The biggest change to come to Python in a long time is the <strong>free-threaded build of Python.</strong> While free-threaded Python existed in 3.13, it was considered experimental at that time. Now in 3.14, free-threads are officially supported, but still optional.</p><p>Free-threaded Python is a build option in Python. You can turn it on if you want to when you build Python. There is still debate about turning free-threading on by default, but that has not been decided at the time of writing of this article.</p><p>Another new change in 3.14 is an experimental<strong> just-in-time (JIT) compiler</strong> for MacOS and Windows release binaries. Currently, the JIT compiler is NOT recommended in production. If you’d like you test it out, you can set &nbsp;<a href=\"https://docs.python.org/3/using/cmdline.html#envvar-PYTHON_JIT\"></a> as an environmental variable. When running with JIT enabled, you may see Python perform 10% slower or up to 20% faster, depending on workload.</p><p>Note that native debuggers and profilers (gdp and perf) are not able to unwind JIT frames, although Python’s own pdb and profile modules work fine with them. Free-threaded builds do not support the JIT compilter though.</p><p>The last item of note is that GPG (Pretty Good Privacy) signatures are&nbsp; not provided for Python 3.14 or newer versions. Instead, users must use &nbsp;<a href=\"https://www.python.org/downloads/metadata/sigstore/\">Sigstore verification materials</a>. Releases have been signed using&nbsp;<a href=\"https://www.sigstore.dev/\">Sigstore</a>&nbsp;since Python 3.11.</p><h2>Python Interpreter Improvements</h2><p>There are a slew of new improvements to the Python interpreter in 3.14. Here is a quick listing along with links:</p><p>Let’s talk about the top three a little. Deferred evaluation of annotations refers to type annotations. In the past, the type annotations that are added to functions, classes, and modules were evaluated eagarly. That is no longer the case. Instead, the annotations are stored &nbsp;in special-purpose&nbsp;<a href=\"https://docs.python.org/3/glossary.html#term-annotate-function\"></a> and evaluated only when necessary with the exception of if <code></code> is used at the top of the module.</p><p>the reason for this change it to improve performance and usability of type annotations in Python. You can use the new&nbsp;<a title=\"annotationlib: Functionality for introspecting annotations\" href=\"https://docs.python.org/3/library/annotationlib.html#module-annotationlib\"></a> module to inspect deferred annotations. Here is an example from the documentation:</p><pre data-enlighter-language=\"python\">&gt;&gt;&gt; from annotationlib import get_annotations, Format\n&gt;&gt;&gt; def func(arg: Undefined):\n...    pass\n&gt;&gt;&gt; get_annotations(func, format=Format.VALUE)\nTraceback (most recent call last):\n  ...\nNameError: name 'Undefined' is not defined\n&gt;&gt;&gt; get_annotations(func, format=Format.FORWARDREF)\n{'arg': ForwardRef('Undefined', owner=&lt;function func at 0x...&gt;)}\n&gt;&gt;&gt; get_annotations(func, format=Format.STRING)\n{'arg': 'Undefined'}</pre><p>Another interesting change is the addition of <strong>multiple interpreters in the standard library</strong>. The complete formal definition of this new feature can be found in <a href=\"https://peps.python.org/pep-0734/\">PEP 734</a>. This feature has been available in Python for more than 20 years, but only throught the C-API. Starting in Python 3.14, you can now use the new <a title=\"concurrent.interpreters: Multiple interpreters in the same process\" href=\"https://docs.python.org/3/library/concurrent.interpreters.html#module-concurrent.interpreters\"></a> module.</p><p>Why would you want to use multiple Python interpreters?</p><ul><li>They support a more human-friendly concurrency model</li><li>They provide a true multi-core parallelism</li></ul><p>These interpreters provide isolated “processes” that run in parallel with no sharing by default.</p><p>Another feature to highlightare the template string literals (t-strings). Full details can be found in <a href=\"https://peps.python.org/pep-0750/\">PEP 750</a>. Brett Cannon, a core developer of the Python language, posted a good introductory article about these new t-strings on <a href=\"https://snarky.ca/unravelling-t-strings/\">his blog</a>. A template string or t-string is a new mechanism for custom string processing. However, unlike an f-string, a t-string will return an object that represents the static and the interpolated parts of the string.</p><p>Here’s a quick example from the documentation:</p><pre data-enlighter-language=\"python\">&gt;&gt;&gt; variety = 'Stilton'\n&gt;&gt;&gt; template = t'Try some {variety} cheese!'\n&gt;&gt;&gt; type(template)\n&lt;class 'string.templatelib.Template'&gt;\n\n&gt;&gt;&gt; list(template)\n['Try some ', Interpolation('Stilton', 'variety', None, ''), ' cheese!']</pre><p>You can use t-strings to sanitize SQL, improve logging, implement custom, lightweight DSLs, and more!</p><h2>Standard Library Improvements</h2><p>Python’s standard library has several significant improvements. Here are the ones highlighted by the Python documentation:</p><p>If you do much compression in Python, then you will be happy that Python has added Zstandard support in addition to the zip and tar archive support that has been there for many years.</p><p>Compressing a string using Zstandard can be accomplished with only a few lines of code:</p><pre data-enlighter-language=\"python\">from compression import zstd\nimport math\n\ndata = str(math.pi).encode() * 20\ncompressed = zstd.compress(data)\nratio = len(compressed) / len(data)\nprint(f\"Achieved compression ratio of {ratio}\")</pre><p>Another neat addition to the Python standard library is asyncio introspection via a new command-line interface. You can now use the following command to introspect:</p><ul></ul><p>The  sub-command&nbsp; will inspect the given process ID and siplay information about the current asyncio tasks. You will see a task table as output which contains a listing of all tasks, their names and coroutine stacks, and which tasks are awaiting them.</p><p>The  sub-command will fetch the same information, but it will render them using a visual async call tree instead, which shows the coroutine relationships in a hierarcical format. Ths  command is especiialy useful for debugging stuck or long-running async programs.</p><p>One other neat update to Python is that the default REPL shell now highlights Python syntax. You can change the color theme using an experimental API _colorize.set_theme() which can be called interactively or in the <a href=\"https://docs.python.org/3/using/cmdline.html#envvar-PYTHONSTARTUP\"></a> script. The REPL also supports impor tauto-completion, which means you can start typing the name of a module and then hit tab to get it to complete.</p><p>Python 3.14 looks to be an exciting release with many performance improvements. They have also laid down more framework to continue improving Python’s speed.</p><p>The latest version of Python has many other imrpovements to modules that aren’t listed here. To see all the nitty gritty details, check out the <a href=\"https://docs.python.org/3/whatsnew/3.14.html\">What’s New in Python 3.14</a> page in the documentation.</p><p>Drop a comment to let us know what you think of Python 3.14 and what you are excited to see in upcoming releases!</p>","contentLength":6580,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null}],"tags":["dev","python"]}