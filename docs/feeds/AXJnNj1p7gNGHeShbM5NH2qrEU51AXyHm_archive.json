{"id":"AXJnNj1p7gNGHeShbM5NH2qrEU51AXyHm","title":"Julia Evans","displayTitle":"Dev - Julia Evans","url":"https://jvns.ca/atom.xml","feedLink":"https://jvns.ca/atom.xml","isQuery":false,"isEmpty":false,"isHidden":false,"itemCount":1,"items":[{"title":"Notes on switching to Helix from vim","url":"https://jvns.ca/blog/2025/10/10/notes-on-switching-to-helix-from-vim/","date":1760054400,"author":"Julia Evans","guid":16,"unread":true,"content":"<p>Hello! Earlier this summer I was talking to a friend about how much I\n<a href=\"https://jvns.ca/blog/2024/09/12/reasons-i--still--love-fish/\">love using fish</a>, and\nhow I love that I don’t have to configure it. They said that they feel the same\nway about the <a href=\"https://helix-editor.com/\">helix</a> text editor, and so I decided\nto give it a try.</p><p>I’ve been using it for 3 months now and here are a few notes.</p><h3>why helix: language servers</h3><p>I think what motivated me to try Helix is that I’ve been trying to get a working\nlanguage server setup (so I can do things like “go to definition”) and getting\na setup that feels good in Vim or Neovim just felt like too much work.</p><p>After using Vim/Neovim for 20 years, I’ve tried both “build my own custom\nconfiguration from scratch” and “use someone else’s pre-buld configuration\nsystem” and even though I love Vim I was excited about having things just work\nwithout having to work on my configuration at all.</p><p>Helix comes with built in language server support, and it feels nice\nto be able to do things like “rename this symbol” in any language.</p><p>One of my favourite things about Helix is the search! If I’m searching all the\nfiles in my repository for a string, it lets me scroll through the potential\nmatching files and see the full context of the match, like this:</p><img src=\"https://jvns.ca/images/helix-search.png\"><p>For comparison, here’s what the vim ripgrep plugin I’ve been using looks like:</p><img src=\"https://jvns.ca/images/vim-ripgrep.png\"><p>There’s no context for what else is around that line.</p><h3>the quick reference is nice</h3><p>One thing I like about Helix is that when I press , I get a little help popup\ntelling me places I can go. I really appreciate this because I don’t often use\nthe “go to definition” or “go to reference” feature and I often forget the\nkeyboard shortcut.</p><img src=\"https://jvns.ca/images/goto.png\" width=\"300px\"><h3>some vim -&gt; helix translations</h3><ul><li>Helix doesn’t have marks like , , instead I’ve been using  and\n to go back (or forward) to the last cursor location</li><li>I think Helix does have macros, but I’ve been using multiple cursors in every\ncase that I would have previously used a macro. I like multiple cursors a lot\nmore than writing macros all the time. If I want to batch change something in\nthe document, my workflow is to press  (to highlight everything), then \nto select (with a regex) the things I want to change, then I can just edit\nall of them as needed.</li><li>Helix doesn’t have neovim-style tabs, instead it has a nice buffer switcher ()\nI can use to switch to the buffer I want. There’s a\n<a href=\"https://github.com/helix-editor/helix/pull/7109\">pull request here</a> to implement neovim-style tabs.\nThere’s also a setting  which can act a bit like tabs\nwith ,  for prev/next “tab” and  to close a “tab”.</li></ul><p>Here’s everything that’s annoyed me about Helix so far.</p><ul><li>I like the way Helix’s  works much less than how\nvim reflows text with . It doesn’t work as well with lists. (<a href=\"https://github.com/helix-editor/helix/issues/3332\">github issue</a>)</li><li>If I’m making a Markdown list, pressing “enter” at the end of a list item\nwon’t continue the list. There’s a <a href=\"https://github.com/helix-editor/helix/wiki/Recipes#continue-markdown-lists--quotes\">partial workaround</a>\nfor bulleted lists but I don’t know one for numbered lists.</li><li>No persistent undo yet: in vim I could use an\n<a href=\"https://vimdoc.sourceforge.net/htmldoc/options.html#'undofile'\">undofile</a> so\nthat I could undo changes even after quitting. Helix doesn’t have that feature yet.\n(<a href=\"https://github.com/helix-editor/helix/pull/9154\">github PR</a>)</li><li>Helix doesn’t autoreload files after they change on disk, I have to run\n () to manually reload them. Not a big deal.</li><li>Sometimes it crashes, maybe every week or so. I think it might be\n<a href=\"https://github.com/helix-editor/helix/issues/12582\">this issue</a>.</li></ul><p>The “markdown list” and reflowing issues come up a lot for me because I spend\na lot of time editing Markdown lists, but I keep using Helix anyway so I guess\nthey can’t be making me that mad.</p><h3>switching was easier than I thought</h3><p>I was worried that relearning 20 years of Vim muscle memory would be really hard.</p><p>It turned out to be easier than I expected, I started using Helix on a\nvacation for a little low-stakes coding project I was doing on the side and\nafter a week or two it didn’t feel so disorienting anymore. I think it might be\nhard to switch back and forth between Vim and Helix, but I haven’t needed to use\nVim recently so I don’t know if that’ll ever become an issue for me.</p><p>The first time I tried Helix I tried to force it to use keybindings that were\nmore similar to Vim and that did not work for me. Just learning the “Helix way”\nwas a lot easier.</p><p>There are still some things that throw me off: for example  in vim and  in\nHelix don’t have the same idea of what a “word” is (the Helix one includes the\nspace after the word, the Vim one doesn’t).</p><h3>using a terminal-based text editor</h3><p>For many years I’d mostly been using a GUI version of vim/neovim, so switching\nto actually using an editor in the terminal was a bit of an adjustment.</p><ol><li>Every project gets its own terminal window, and all of the tabs in that\nwindow (mostly) have the same working directory</li><li>I make my Helix tab the first tab in the terminal window</li></ol><p>It works pretty well, I might actually like it better than my previous workflow.</p><p>I appreciate that my configuration is really simple, compared to my neovim\nconfiguration which is hundreds of lines. It’s mostly just 4 keyboard\nshortcuts.</p><pre><code>theme = \"solarized_light\"\n[editor]\n# Sync clipboard with system clipboard\ndefault-yank-register = \"+\"\n\n[keys.normal]\n# I didn't like that Ctrl+C was the default \"toggle comments\" shortcut\n\"#\" = \"toggle_comments\"\n\n# I didn't feel like learning a different way\n# to go to the beginning/end of a line so\n# I remapped ^ and $\n\"^\" = \"goto_first_nonwhitespace\"\n\"$\" = \"goto_line_end\"\n\n[keys.select]\n\"^\" = \"goto_first_nonwhitespace\"\n\"$\" = \"goto_line_end\"\n\n[keys.normal.space]\n# I write a lot of text so I need to constantly reflow,\n# and missed vim's `gq` shortcut\nl = \":reflow\"\n</code></pre><p>There’s a separate  configuration where I set some language\npreferences, like turning off autoformatting.\nFor example, here’s my Python configuration:</p><pre><code>[[language]]\nname = \"python\"\nformatter = { command = \"black\", args = [\"--stdin-filename\", \"%{buffer_name}\", \"-\"] }\nlanguage-servers = [\"pyright\"]\nauto-format = false\n</code></pre><p>Three months is not that long, and it’s possible that I’ll decide to go back\nto Vim at some point. For example, I wrote a <a href=\"https://jvns.ca/blog/2023/02/28/some-notes-on-using-nix/\">post about switching to\nnix</a> a while back but\nafter maybe 8 months I switched back to Homebrew (though I’m still using NixOS\nto manage one little server, and I’m still satisfied with that).</p>","contentLength":6116,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null}],"tags":["dev"]}